{
  "openapi": "3.0.3",
  "info": {
    "x-logo": {
      "url": "https://chainstack.com/assets/docs/api-docs-logo.svg",
      "backgroundColor": "#F5F8FC",
      "altText": "Chainstack"
    },
    "title": "💙 CHAINSTACK PLATFORM API",
    "version": "v1",
    "contact": {
      "name": "API Support",
      "email": "support@chainstack.com"
    },
    "description": "A set of API endpoints to operate and manage the platform resources.<br>\nSee also a [quick API tutorial](https://docs.chainstack.com/reference/quick-tutorial).\n"
  },
  "paths": {
    "/v1/organization/": {
      "get": {
        "operationId": "getOrganizatonInfo",
        "summary": "Get Organization name and ID",
        "description": "Get the name and ID of your organization.",
        "tags": [
          "Organization"
        ],
        "security": [
          {
            "APIKeyAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                },
                "examples": {
                  "organization": {
                    "value": {
                      "id": "RG-123-456",
                      "name": "My organization"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "updateOrganizationInfo",
        "summary": "Update Organization name",
        "description": "Change the name of your organization.",
        "tags": [
          "Organization"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationUpdate"
              },
              "examples": {
                "organization": {
                  "value": {
                    "name": "My organization"
                  }
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "APIKeyAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                },
                "examples": {
                  "organization": {
                    "value": {
                      "id": "RG-123-456",
                      "name": "My organization"
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          }
        }
      }
    },
    "/v1/projects/": {
      "get": {
        "operationId": "listAllProjects",
        "summary": "List all Projects",
        "description": "List all projects your organization is part of.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ProjectOrdering"
          },
          {
            "$ref": "#/components/parameters/Pagination"
          },
          {
            "$ref": "#/components/parameters/OrganizationIdFilter"
          },
          {
            "$ref": "#/components/parameters/NameFilter"
          },
          {
            "$ref": "#/components/parameters/ProjectTypeFilter"
          }
        ],
        "tags": [
          "Project"
        ],
        "security": [
          {
            "APIKeyAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Project"
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "list": {
                    "value": {
                      "count": 1,
                      "next": null,
                      "previous": null,
                      "results": [
                        {
                          "id": "PR-123-456",
                          "name": "My public chain project",
                          "type": "public",
                          "networks": 0,
                          "created_at": "2020-06-15T07:38:00.747Z",
                          "creator": {
                            "id": "UR-111-111-111",
                            "email": "john.smith@example.com",
                            "first_name": "John",
                            "last_name": "Smith",
                            "organization": {
                              "id": "RG-123-456",
                              "name": "My organization"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "createProject",
        "summary": "Create Project",
        "description": "Create a project.",
        "tags": [
          "Project"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreate"
              },
              "examples": {
                "public chain": {
                  "$ref": "#/components/examples/PublicProjectCreate"
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "APIKeyAuthentication": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                },
                "examples": {
                  "public chain": {
                    "$ref": "#/components/examples/PublicProject"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          }
        }
      }
    },
    "/v1/projects/{id}/": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Id"
        }
      ],
      "get": {
        "operationId": "retrieveProject",
        "summary": "Retrieve Project",
        "description": "Retrieve the project details.",
        "tags": [
          "Project"
        ],
        "security": [
          {
            "APIKeyAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                },
                "examples": {
                  "public chain": {
                    "$ref": "#/components/examples/PublicProject"
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "operationId": "updateProject",
        "summary": "Update Project",
        "description": "Change project name and project description.",
        "tags": [
          "Project"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectUpdate"
              },
              "examples": {
                "project": {
                  "value": {
                    "name": "My new project name",
                    "description": "My new project description"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                },
                "examples": {
                  "public chain": {
                    "$ref": "#/components/examples/PublicProject"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "operationId": "deleteProject",
        "summary": "Delete Project",
        "description": "Delete the project.",
        "tags": [
          "Project"
        ],
        "security": [
          {
            "APIKeyAuthentication": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/v1/projects/{id}/members/": {
      "get": {
        "operationId": "retrieveProjectMembers",
        "summary": "Retrieve Project members",
        "description": "Retrieve members of a consortium project.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          },
          {
            "$ref": "#/components/parameters/Pagination"
          }
        ],
        "tags": [
          "Project"
        ],
        "security": [
          {
            "APIKeyAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ProjectMember"
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "list": {
                    "value": {
                      "count": 1,
                      "next": null,
                      "previous": null,
                      "results": [
                        {
                          "id": "RG-123-456",
                          "name": "My organization",
                          "email": "john.smith@example.com"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/v1/networks/": {
      "get": {
        "operationId": "listAllNetworks",
        "summary": "List all Networks",
        "description": "List all networks your organization is part of.",
        "parameters": [
          {
            "$ref": "#/components/parameters/NetworkOrdering"
          },
          {
            "$ref": "#/components/parameters/Pagination"
          },
          {
            "$ref": "#/components/parameters/ProjectIdFilter"
          },
          {
            "$ref": "#/components/parameters/NameFilter"
          },
          {
            "$ref": "#/components/parameters/PublicNetworkNameFilter"
          },
          {
            "$ref": "#/components/parameters/NetworkStatusFilter"
          },
          {
            "$ref": "#/components/parameters/ProtocolFilter"
          },
          {
            "$ref": "#/components/parameters/NetworkProjectTypeFilter"
          }
        ],
        "tags": [
          "Network"
        ],
        "security": [
          {
            "APIKeyAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Network"
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "list": {
                    "value": {
                      "count": 1,
                      "next": null,
                      "previous": null,
                      "results": [
                        {
                          "id": "NW-123-456-7",
                          "name": "Mainnet",
                          "project": "PR-123-456",
                          "protocol": "polygon-pos",
                          "configuration": {
                            "network": "polygon-pos-mainnet"
                          },
                          "details": {},
                          "status": "ok",
                          "nodes": [
                            {
                              "id": "ND-123-456-789",
                              "name": "My Polygon PoS node",
                              "network": "NW-123-456-7",
                              "organization": "RG-123-456",
                              "type": "dedicated",
                              "role": "peer",
                              "provider": "gcloud",
                              "region": "asia-southeast1",
                              "status": "running",
                              "configuration": {
                                "archive": true
                              },
                              "details": {
                                "mode": "archive",
                                "version": "1.0.6",
                                "api_namespaces": [
                                  "net",
                                  "eth",
                                  "web3",
                                  "txpool",
                                  "debug",
                                  "parlia"
                                ],
                                "graphql_endpoint": "https://nd-123-456-789.p2pify.com/graphql",
                                "https_endpoint": "https://nd-123-456-789.p2pify.com",
                                "wss_endpoint": "wss://ws-nd-123-456-789.p2pify.com",
                                "auth_username": "user-name",
                                "auth_password": "pass-word-pass-word-pass-word",
                                "auth_key": "3c6e0b8a9c15224a8228b9a98ca1531d"
                              },
                              "created_at": "2020-06-15T07:38:00.747Z",
                              "creator": {
                                "id": "UR-111-111-111",
                                "email": "john.smith@example.com",
                                "first_name": "John",
                                "last_name": "Smith",
                                "organization": {
                                  "id": "RG-123-456",
                                  "name": "My organization"
                                }
                              }
                            }
                          ],
                          "created_at": "2020-06-15T07:38:00.747Z",
                          "creator": {
                            "id": "UR-111-111-111",
                            "email": "john.smith@example.com",
                            "first_name": "John",
                            "last_name": "Smith",
                            "organization": {
                              "id": "RG-123-456",
                              "name": "My organization"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "createNetwork",
        "summary": "Create Network",
        "description": "Create a network.",
        "tags": [
          "Network"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NetworkCreate"
              },
              "examples": {
                "ethereum": {
                  "$ref": "#/components/examples/EthereumNetworkCreate"
                },
                "polygon pos": {
                  "$ref": "#/components/examples/PolygonPoSNetworkCreate"
                },
                "bsc": {
                  "$ref": "#/components/examples/BinanceSmartChainNetworkCreate"
                },
                "avalanche": {
                  "$ref": "#/components/examples/AvalancheNetworkCreate"
                },
                "arbitrum": {
                  "$ref": "#/components/examples/ArbitrumNetworkCreate"
                },
                "near": {
                  "$ref": "#/components/examples/NearNetworkCreate"
                },
                "aurora": {
                  "$ref": "#/components/examples/AuroraNetworkCreate"
                },
                "gnosis": {
                  "$ref": "#/components/examples/GnosisNetworkCreate"
                },
                "cronos": {
                  "$ref": "#/components/examples/CronosNetworkCreate"
                },
                "fantom": {
                  "$ref": "#/components/examples/FantomNetworkCreate"
                },
                "tezos": {
                  "$ref": "#/components/examples/TezosNetworkCreate"
                },
                "solana": {
                  "$ref": "#/components/examples/SolanaNetworkCreate"
                },
                "starknet": {
                  "$ref": "#/components/examples/StarknetNetworkCreate"
                },
                "fuse": {
                  "$ref": "#/components/examples/FuseNetworkCreate"
                },
                "bitcoin": {
                  "$ref": "#/components/examples/BitcoinNetworkCreate"
                },
                "harmony": {
                  "$ref": "#/components/examples/HarmonyNetworkCreate"
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "APIKeyAuthentication": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Network"
                },
                "examples": {
                  "ethereum": {
                    "$ref": "#/components/examples/EthereumNetwork"
                  },
                  "polygon pos": {
                    "$ref": "#/components/examples/PolygonPoSNetwork"
                  },
                  "bsc": {
                    "$ref": "#/components/examples/BinanceSmartChainNetwork"
                  },
                  "avalanche": {
                    "$ref": "#/components/examples/AvalancheNetwork"
                  },
                  "arbitrum": {
                    "$ref": "#/components/examples/ArbitrumNetwork"
                  },
                  "near": {
                    "$ref": "#/components/examples/NearNetwork"
                  },
                  "aurora": {
                    "$ref": "#/components/examples/AuroraNetwork"
                  },
                  "gnosis": {
                    "$ref": "#/components/examples/GnosisNetwork"
                  },
                  "cronos": {
                    "$ref": "#/components/examples/CronosNetwork"
                  },
                  "fantom": {
                    "$ref": "#/components/examples/FantomNetwork"
                  },
                  "tezos": {
                    "$ref": "#/components/examples/TezosNetwork"
                  },
                  "solana": {
                    "$ref": "#/components/examples/SolanaNetwork"
                  },
                  "starknet": {
                    "$ref": "#/components/examples/StarknetNetwork"
                  },
                  "fuse": {
                    "$ref": "#/components/examples/FuseNetwork"
                  },
                  "bitcoin": {
                    "$ref": "#/components/examples/BitcoinNetwork"
                  },
                  "harmony": {
                    "$ref": "#/components/examples/HarmonyNetwork"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          }
        }
      }
    },
    "/v1/networks/{id}/": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Id"
        }
      ],
      "get": {
        "operationId": "retrieveNetwork",
        "summary": "Retrieve Network",
        "description": "Retrieve network details.",
        "tags": [
          "Network"
        ],
        "security": [
          {
            "APIKeyAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Network"
                },
                "examples": {
                  "ethereum": {
                    "$ref": "#/components/examples/EthereumNetwork"
                  },
                  "polygon pos": {
                    "$ref": "#/components/examples/PolygonPoSNetwork"
                  },
                  "bsc": {
                    "$ref": "#/components/examples/BinanceSmartChainNetwork"
                  },
                  "avalanche": {
                    "$ref": "#/components/examples/AvalancheNetwork"
                  },
                  "arbitrum": {
                    "$ref": "#/components/examples/ArbitrumNetwork"
                  },
                  "near": {
                    "$ref": "#/components/examples/NearNetwork"
                  },
                  "aurora": {
                    "$ref": "#/components/examples/AuroraNetwork"
                  },
                  "gnosis": {
                    "$ref": "#/components/examples/GnosisNetwork"
                  },
                  "cronos": {
                    "$ref": "#/components/examples/CronosNetwork"
                  },
                  "fantom": {
                    "$ref": "#/components/examples/FantomNetwork"
                  },
                  "tezos": {
                    "$ref": "#/components/examples/TezosNetwork"
                  },
                  "solana": {
                    "$ref": "#/components/examples/SolanaNetwork"
                  },
                  "starknet": {
                    "$ref": "#/components/examples/StarknetNetwork"
                  },
                  "fuse": {
                    "$ref": "#/components/examples/FuseNetwork"
                  },
                  "bitcoin": {
                    "$ref": "#/components/examples/BitcoinNetwork"
                  },
                  "harmony": {
                    "$ref": "#/components/examples/HarmonyNetwork"
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "operationId": "updateNetwork",
        "summary": "Update Network",
        "description": "Change the network name. Only for `consortium` projects.",
        "tags": [
          "Network"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NetworkUpdate"
              },
              "examples": {
                "network": {
                  "value": {
                    "name": "My new network name"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Network"
                },
                "examples": {
                  "ethereum": {
                    "$ref": "#/components/examples/EthereumNetwork"
                  },
                  "polygon pos": {
                    "$ref": "#/components/examples/PolygonPoSNetwork"
                  },
                  "bsc": {
                    "$ref": "#/components/examples/BinanceSmartChainNetwork"
                  },
                  "avalanche": {
                    "$ref": "#/components/examples/AvalancheNetwork"
                  },
                  "arbitrum": {
                    "$ref": "#/components/examples/ArbitrumNetwork"
                  },
                  "near": {
                    "$ref": "#/components/examples/NearNetwork"
                  },
                  "aurora": {
                    "$ref": "#/components/examples/AuroraNetwork"
                  },
                  "gnosis": {
                    "$ref": "#/components/examples/GnosisNetwork"
                  },
                  "cronos": {
                    "$ref": "#/components/examples/CronosNetwork"
                  },
                  "fantom": {
                    "$ref": "#/components/examples/FantomNetwork"
                  },
                  "tezos": {
                    "$ref": "#/components/examples/TezosNetwork"
                  },
                  "solana": {
                    "$ref": "#/components/examples/SolanaNetwork"
                  },
                  "starknet": {
                    "$ref": "#/components/examples/StarknetNetwork"
                  },
                  "fuse": {
                    "$ref": "#/components/examples/FuseNetwork"
                  },
                  "bitcoin": {
                    "$ref": "#/components/examples/BitcoinNetwork"
                  },
                  "harmony": {
                    "$ref": "#/components/examples/HarmonyNetwork"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "operationId": "deleteNetwork",
        "summary": "Delete Network",
        "description": "Delete the network.",
        "tags": [
          "Network"
        ],
        "security": [
          {
            "APIKeyAuthentication": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/v1/nodes/": {
      "get": {
        "operationId": "listAllNodes",
        "summary": "List all Nodes",
        "description": "List all nodes in the networks your organization is part of.",
        "parameters": [
          {
            "$ref": "#/components/parameters/NodeOrdering"
          },
          {
            "$ref": "#/components/parameters/Pagination"
          },
          {
            "$ref": "#/components/parameters/ProjectIdFilter"
          },
          {
            "$ref": "#/components/parameters/OrganizationIdFilter"
          },
          {
            "$ref": "#/components/parameters/NetworkIdFilter"
          },
          {
            "$ref": "#/components/parameters/RegionFilter"
          },
          {
            "$ref": "#/components/parameters/ProviderFilter"
          },
          {
            "$ref": "#/components/parameters/ProtocolFilter"
          },
          {
            "$ref": "#/components/parameters/NodeStatusFilter"
          },
          {
            "$ref": "#/components/parameters/NodeRoleFilter"
          },
          {
            "$ref": "#/components/parameters/NodeTypeFilter"
          },
          {
            "$ref": "#/components/parameters/ArchiveFilter"
          },
          {
            "$ref": "#/components/parameters/PublicNetworkNameFilter"
          },
          {
            "$ref": "#/components/parameters/NameFilter"
          },
          {
            "$ref": "#/components/parameters/NetworkProjectTypeFilter"
          }
        ],
        "tags": [
          "Node"
        ],
        "security": [
          {
            "APIKeyAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Node"
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "list": {
                    "value": {
                      "count": 1,
                      "next": null,
                      "previous": null,
                      "results": [
                        {
                          "id": "ND-123-456-789",
                          "name": "My Polygon PoS archive node",
                          "network": "NW-123-456-7",
                          "organization": "RG-123-456",
                          "type": "dedicated",
                          "role": "peer",
                          "provider": "gcloud",
                          "region": "asia-southeast1",
                          "status": "running",
                          "configuration": {
                            "archive": true
                          },
                          "details": {
                            "mode": "archive",
                            "version": "1.0.6",
                            "api_namespaces": [
                              "net",
                              "eth",
                              "web3",
                              "txpool",
                              "debug",
                              "parlia"
                            ],
                            "graphql_endpoint": "https://nd-123-456-789.p2pify.com/graphql",
                            "https_endpoint": "https://nd-123-456-789.p2pify.com",
                            "wss_endpoint": "wss://ws-nd-123-456-789.p2pify.com",
                            "auth_username": "user-name",
                            "auth_password": "pass-word-pass-word-pass-word",
                            "auth_key": "3c6e0b8a9c15224a8228b9a98ca1531d"
                          },
                          "created_at": "2020-06-15T07:38:00.747Z",
                          "creator": {
                            "id": "UR-111-111-111",
                            "email": "john.smith@example.com",
                            "first_name": "John",
                            "last_name": "Smith",
                            "organization": {
                              "id": "RG-123-456",
                              "name": "My organization"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "createNode",
        "summary": "Create Node",
        "description": "Create Node",
        "tags": [
          "Node"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NodeCreate"
              },
              "examples": {
                "ethereum": {
                  "$ref": "#/components/examples/EthereumNodeCreate"
                },
                "polygon pos": {
                  "$ref": "#/components/examples/PolygonPoSNodeCreate"
                },
                "bsc": {
                  "$ref": "#/components/examples/BinanceSmartChainNodeCreate"
                },
                "avalanche": {
                  "$ref": "#/components/examples/AvalancheNodeCreate"
                },
                "fantom": {
                  "$ref": "#/components/examples/FantomNodeCreate"
                },
                "tezos": {
                  "$ref": "#/components/examples/TezosNodeCreate"
                },
                "solana": {
                  "$ref": "#/components/examples/SolanaNodeCreate"
                },
                "starknet": {
                  "$ref": "#/components/examples/StarknetNodeCreate"
                },
                "bitcoin": {
                  "$ref": "#/components/examples/BitcoinNodeCreate"
                },
                "harmony": {
                  "$ref": "#/components/examples/HarmonyNodeCreate"
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "APIKeyAuthentication": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Node"
                },
                "examples": {
                  "ethereum": {
                    "$ref": "#/components/examples/EthereumNode"
                  },
                  "polygon pos": {
                    "$ref": "#/components/examples/PolygonPoSNode"
                  },
                  "bsc": {
                    "$ref": "#/components/examples/BinanceSmartChainNode"
                  },
                  "avalanche": {
                    "$ref": "#/components/examples/AvalancheNode"
                  },
                  "fantom": {
                    "$ref": "#/components/examples/FantomNode"
                  },
                  "tezos": {
                    "$ref": "#/components/examples/TezosNode"
                  },
                  "solana": {
                    "$ref": "#/components/examples/SolanaNode"
                  },
                  "starknet": {
                    "$ref": "#/components/examples/StarknetNode"
                  },
                  "bitcoin": {
                    "$ref": "#/components/examples/BitcoinNode"
                  },
                  "harmony": {
                    "$ref": "#/components/examples/HarmonyNode"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          }
        }
      }
    },
    "/v1/nodes/{id}/": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Id"
        }
      ],
      "get": {
        "operationId": "retrieveNode",
        "summary": "Retrieve Node",
        "description": "Retrieve node details.",
        "tags": [
          "Node"
        ],
        "security": [
          {
            "APIKeyAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Node"
                },
                "examples": {
                  "ethereum": {
                    "$ref": "#/components/examples/EthereumNode"
                  },
                  "polygon pos": {
                    "$ref": "#/components/examples/PolygonPoSNode"
                  },
                  "bsc": {
                    "$ref": "#/components/examples/BinanceSmartChainNode"
                  },
                  "avalanche": {
                    "$ref": "#/components/examples/AvalancheNode"
                  },
                  "fantom": {
                    "$ref": "#/components/examples/FantomNode"
                  },
                  "tezos": {
                    "$ref": "#/components/examples/TezosNode"
                  },
                  "solana": {
                    "$ref": "#/components/examples/SolanaNode"
                  },
                  "starknet": {
                    "$ref": "#/components/examples/StarknetNode"
                  },
                  "bitcoin": {
                    "$ref": "#/components/examples/BitcoinNode"
                  },
                  "harmony": {
                    "$ref": "#/components/examples/HarmonyNode"
                  }
                }
              }
            },
            "description": ""
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "operationId": "updateNode",
        "summary": "Update Node",
        "description": "Change the node name.",
        "tags": [
          "Node"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NodeUpdate"
              },
              "examples": {
                "node": {
                  "value": {
                    "name": "My new node name"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Node"
                },
                "examples": {
                  "ethereum": {
                    "$ref": "#/components/examples/EthereumNode"
                  },
                  "polygon pos": {
                    "$ref": "#/components/examples/PolygonPoSNode"
                  },
                  "bsc": {
                    "$ref": "#/components/examples/BinanceSmartChainNode"
                  },
                  "avalanche": {
                    "$ref": "#/components/examples/AvalancheNode"
                  },
                  "fantom": {
                    "$ref": "#/components/examples/FantomNode"
                  },
                  "tezos": {
                    "$ref": "#/components/examples/TezosNode"
                  },
                  "solana": {
                    "$ref": "#/components/examples/SolanaNode"
                  },
                  "starknet": {
                    "$ref": "#/components/examples/StarknetNode"
                  },
                  "bitcoin": {
                    "$ref": "#/components/examples/BitcoinNode"
                  },
                  "harmony": {
                    "$ref": "#/components/examples/HarmonyNode"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "operationId": "deleteNode",
        "summary": "Delete Node",
        "description": "Delete the node.",
        "tags": [
          "Node"
        ],
        "security": [
          {
            "APIKeyAuthentication": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/v1/marketplace/applications/{slug}/token/": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Slug"
        }
      ],
      "post": {
        "operationId": "retrieveToken",
        "summary": "Retrieve Application Token",
        "description": "Retrieve a token required to access a third-party application from Chainstack Marketplace.",
        "tags": [
          "Marketplace"
        ],
        "security": [
          {
            "APIKeyAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessToken"
                },
                "examples": {
                  "token": {
                    "value": {
                      "access_token": "eyJhbGciOiJFZERTQSIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJSRy04MzctMzgwIiwiaXNzIjoiY2hhaW5zdGFjayIsImV4cCI6MTY3NTQzNjM0OSwibmJmIjoxNjc1NDMyNjg5LCJpYXQiOjE2NzU0MzI3NDl9.udMCKIV7y6XlNwfsvwwGm47R55yDdw9FeOR_Zb_14oVTi5ipPH3NPiJukB4mBR81aHfr1mIA2wtQM3jf7wDSAw"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/v1/ipfs/pins": {
      "get": {
        "operationId": "getPinList",
        "description": "Get list of pins.",
        "summary": "Get list of pins",
        "parameters": [
          {
            "$ref": "#/components/parameters/IpfsApiPinsParams"
          }
        ],
        "tags": [
          "IPFS Storage"
        ],
        "security": [
          {
            "APIKeyAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PinList"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/IpfsError"
          },
          "403": {
            "$ref": "#/components/responses/IpfsError"
          },
          "500": {
            "$ref": "#/components/responses/IpfsError"
          }
        }
      }
    },
    "/v1/ipfs/pins/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/IpfsApiId"
        }
      ],
      "delete": {
        "operationId": "deleteFile",
        "summary": "Delete file by file ID",
        "description": "Delete file by file ID.",
        "tags": [
          "IPFS Storage"
        ],
        "security": [
          {
            "APIKeyAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pin"
                }
              }
            },
            "description": ""
          },
          "400": {
            "$ref": "#/components/responses/IpfsError"
          },
          "403": {
            "$ref": "#/components/responses/IpfsError"
          },
          "500": {
            "$ref": "#/components/responses/IpfsError"
          }
        }
      },
      "get": {
        "operationId": "getPinByPublicId",
        "summary": "Get pin by public ID",
        "description": "Get pin by public ID.",
        "tags": [
          "IPFS Storage"
        ],
        "security": [
          {
            "APIKeyAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pin"
                }
              }
            },
            "description": ""
          },
          "400": {
            "$ref": "#/components/responses/IpfsError"
          },
          "403": {
            "$ref": "#/components/responses/IpfsError"
          },
          "500": {
            "$ref": "#/components/responses/IpfsError"
          }
        }
      }
    },
    "/v1/ipfs/pins/pinfile": {
      "post": {
        "operationId": "addFileForUpload",
        "summary": "Add file for upload",
        "description": "Add file for upload.",
        "tags": [
          "IPFS Storage"
        ],
        "security": [
          {
            "APIKeyAuthentication": []
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PinFile"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pin"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/IpfsError"
          },
          "403": {
            "$ref": "#/components/responses/IpfsError"
          },
          "500": {
            "$ref": "#/components/responses/IpfsError"
          }
        }
      }
    },
    "/v1/ipfs/pins/pinfiles": {
      "post": {
        "operationId": "addFilesForUpload",
        "summary": "Add several files for upload",
        "description": "Add several files for upload.",
        "tags": [
          "IPFS Storage"
        ],
        "security": [
          {
            "APIKeyAuthentication": []
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PinFile"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pin"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/IpfsError"
          },
          "403": {
            "$ref": "#/components/responses/IpfsError"
          },
          "500": {
            "$ref": "#/components/responses/IpfsError"
          }
        }
      }
    },
    "/v1/ipfs/pins/pinfolder": {
      "post": {
        "operationId": "addFolderForUpload",
        "summary": "Add folder for upload",
        "description": "Add folder for upload.",
        "tags": [
          "IPFS Storage"
        ],
        "security": [
          {
            "APIKeyAuthentication": []
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Folder"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pin"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/IpfsError"
          },
          "403": {
            "$ref": "#/components/responses/IpfsError"
          },
          "500": {
            "$ref": "#/components/responses/IpfsError"
          }
        }
      }
    },
    "/v1/ipfs/pins/pinbycid": {
      "post": {
        "operationId": "addFileByCid",
        "summary": "Add file by CID",
        "description": "Add file by CID.",
        "tags": [
          "IPFS Storage"
        ],
        "security": [
          {
            "APIKeyAuthentication": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PinByCid"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pin"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/IpfsError"
          },
          "403": {
            "$ref": "#/components/responses/IpfsError"
          },
          "500": {
            "$ref": "#/components/responses/IpfsError"
          }
        }
      }
    },
    "/v1/faucet/goerli": {
      "post": {
        "operationId": "faucetGoerli",
        "summary": "Goerli Faucet",
        "description": "Request test tokens.",
        "tags": [
          "Faucet"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FaucetGoerliRequest"
              },
              "examples": {
                "value": {
                  "value": {
                    "address": "0x1111111111111111111111111111111111111111"
                  }
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "APIKeyAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaucetGoerliResponse"
                },
                "examples": {
                  "value": {
                    "value": {
                      "amountSent": 500000000000000000,
                      "transaction": "https://goerli.etherscan.io/tx/0x1111111111111111111111111111111111111111111111111111111111111111"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          }
        }
      }
    },
    "/v1/faucet/sepolia": {
      "post": {
        "operationId": "sepoliaGoerli",
        "summary": "Sepolia Faucet",
        "description": "Request test tokens.",
        "tags": [
          "Faucet"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FaucetSepoliaRequest"
              },
              "examples": {
                "value": {
                  "value": {
                    "address": "0x1111111111111111111111111111111111111111"
                  }
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "APIKeyAuthentication": []
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaucetSepoliaResponse"
                },
                "examples": {
                  "value": {
                    "value": {
                      "amountSent": 500000000000000000,
                      "transaction": "https://sepolia.etherscan.io/tx/0x1111111111111111111111111111111111111111111111111111111111111111"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "APIKeyAuthentication": {
        "type": "http",
        "scheme": "bearer",
        "description": "Chainstack API uses [API keys](https://docs.chainstack.com/reference/platform-api-getting-started) to authenticate requests. You can view and manage your API keys in the platform UI.\nYour API keys carry many privileges, so be sure to keep them secure!\nProvide your API key as the `Authorization` header. The value of the header consists of `Bearer` prefix and secret key generated through the platform UI.\n\n```bash\ncurl -X GET 'https://api.chainstack.com/v1/organization/' \\\n--header 'Authorization: Bearer FX7CWlLg.FMpAO8cgCX2N7s41EncRru2nb5CmTZUt'\n```\n\nAll API requests must be made over HTTPS.\n"
      }
    },
    "schemas": {
      "Organization": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Name of the organization."
          }
        }
      },
      "OrganizationUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the organization."
          }
        }
      },
      "ProjectTypeEnum": {
        "type": "string",
        "description": "Type of the project.\n<br>\n* `public` for public chain project\n",
        "enum": [
          "public"
        ]
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123,
            "description": "Number of the objects in the paginated results."
          },
          "next": {
            "type": "string",
            "nullable": true,
            "description": "Link to the next page."
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "description": "Link to the previous page."
          },
          "results": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        }
      },
      "Object": {
        "type": "object",
        "description": "Common object representation.",
        "readOnly": true,
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "Creator": {
        "type": "object",
        "description": "Creator of the object.",
        "readOnly": true,
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "email": {
            "type": "string",
            "format": "email",
            "readOnly": true
          },
          "first_name": {
            "type": "string",
            "readOnly": true
          },
          "last_name": {
            "type": "string",
            "readOnly": true
          },
          "organization": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Object"
              }
            ],
            "description": "Creator's organization."
          }
        }
      },
      "CreatedAt": {
        "type": "string",
        "format": "date-time",
        "readOnly": true,
        "description": "When the object was created."
      },
      "BaseProject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Name of the project."
          },
          "description": {
            "type": "string",
            "description": "Description of the project."
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProjectTypeEnum"
              }
            ],
            "default": "public"
          },
          "members": {
            "type": "integer",
            "readOnly": true,
            "description": "Number of members invited to the consortium project.\n<br>Only for the `consortium` project.\n"
          },
          "networks": {
            "type": "integer",
            "readOnly": true,
            "description": "Number of networks created in the project."
          },
          "creator": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Creator"
              }
            ],
            "readOnly": true,
            "description": "Creator of the project."
          },
          "created_at": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreatedAt"
              }
            ],
            "description": "When the project was created."
          }
        }
      },
      "Project": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseProject"
          }
        ]
      },
      "ProjectCreate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseProject"
          },
          {
            "type": "object",
            "required": [
              "name"
            ]
          }
        ]
      },
      "ProjectUpdate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseProject"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "readOnly": true
              }
            }
          }
        ]
      },
      "ProjectMember": {
        "type": "object",
        "description": "Member organization of the consortium project.",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "email": {
            "type": "string",
            "format": "email",
            "readOnly": true
          }
        }
      },
      "NetworkStatusEnum": {
        "type": "string",
        "description": "See more about [statuses](https://docs.chainstack.com/platform/view-node-and-network-status).\n",
        "readOnly": true,
        "enum": [
          "pending",
          "ok",
          "failed",
          "warning",
          "stopping",
          "stopped",
          "starting"
        ]
      },
      "Protocol": {
        "type": "string",
        "enum": [
          "ethereum",
          "polygon-pos",
          "bsc",
          "avalanche",
          "arbitrum",
          "near",
          "aurora",
          "gnosis",
          "cronos",
          "fantom",
          "starknet",
          "harmony",
          "tezos",
          "fuse",
          "bitcoin"
        ],
        "description": "Protocol.\n<br>See also [Supported protocols](https://docs.chainstack.com/platform/supported-protocols).\n"
      },
      "BaseNetwork": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "project": {
            "type": "string",
            "description": "ID of the network's project.\n"
          },
          "protocol": {
            "$ref": "#/components/schemas/Protocol"
          },
          "details": {
            "type": "object",
            "readOnly": true
          },
          "status": {
            "$ref": "#/components/schemas/NetworkStatusEnum"
          },
          "creator": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Creator"
              }
            ],
            "description": "Creator of the network."
          },
          "created_at": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreatedAt"
              }
            ],
            "description": "When the network was created."
          }
        }
      },
      "EthereumNetworkConfiguration": {
        "type": "object",
        "description": "Ethereum network configuration.",
        "properties": {
          "network": {
            "type": "string",
            "description": "Network to join.\n<br>See also [Ethereum networks](https://docs.chainstack.com/operations/ethereum/networks).\n",
            "enum": [
              "ethereum-mainnet",
              "ethereum-ropsten-testnet",
              "ethereum-rinkeby-testnet"
            ]
          }
        }
      },
      "PolygonPoSNetworkConfiguration": {
        "type": "object",
        "description": "Polygon PoS network configuration.",
        "properties": {
          "network": {
            "type": "string",
            "description": "Network to join.\n<br>See also [Polygon PoS networks](https://docs.chainstack.com/operations/polygon/networks).\n",
            "enum": [
              "polygon-pos-mainnet",
              "polygon-pos-testnet"
            ]
          }
        }
      },
      "BinanceSmartChainNetworkConfiguration": {
        "type": "object",
        "description": "Binance Smart Chain network configuration.",
        "properties": {
          "network": {
            "type": "string",
            "description": "Network to join.\n<br>See also [Binance Smart Chain networks](https://docs.chainstack.com/operations/bsc/networks).\n",
            "enum": [
              "bsc-mainnet",
              "bsc-testnet"
            ]
          }
        }
      },
      "AvalancheNetworkConfiguration": {
        "type": "object",
        "description": "Avalanche network configuration.",
        "properties": {
          "network": {
            "type": "string",
            "description": "Network to join.\n<br>See also [Avalanche networks](https://docs.chainstack.com/operations/avalanche/networks).\n",
            "enum": [
              "avalanche-mainnet",
              "avalanche-testnet"
            ]
          }
        }
      },
      "ArbitrumNetworkConfiguration": {
        "type": "object",
        "description": "Arbitrum network configuration.",
        "properties": {
          "network": {
            "type": "string",
            "description": "Network to join.\n<br>See also [Arbitrum networks](https://docs.chainstack.com/operations/arbitrum/networks).\n",
            "enum": [
              "arbitrum-mainnet",
              "arbitrum-goerli"
            ]
          }
        }
      },
      "NearNetworkConfiguration": {
        "type": "object",
        "description": "Near network configuration.",
        "properties": {
          "network": {
            "type": "string",
            "description": "Network to join.\n<br>See also [Near networks](https://docs.chainstack.com/operations/near/networks).\n",
            "enum": [
              "near-mainnet",
              "near-testnet"
            ]
          }
        }
      },
      "AuroraNetworkConfiguration": {
        "type": "object",
        "description": "Aurora network configuration.",
        "properties": {
          "network": {
            "type": "string",
            "description": "Network to join.\n<br>See also [Aurora networks](https://docs.chainstack.com/operations/aurora/networks).\n",
            "enum": [
              "aurora-mainnet",
              "aurora-testnet"
            ]
          }
        }
      },
      "GnosisNetworkConfiguration": {
        "type": "object",
        "description": "Gnosis network configuration.",
        "properties": {
          "network": {
            "type": "string",
            "description": "Network to join.\n<br>See also [Gnosis networks](https://docs.chainstack.com/operations/gnosis/networks).\n",
            "enum": [
              "gnosis-mainnet",
              "gnosis-testnet"
            ]
          }
        }
      },
      "CronosNetworkConfiguration": {
        "type": "object",
        "description": "Cronos network configuration.",
        "properties": {
          "network": {
            "type": "string",
            "description": "Network to join.\n<br>See also [Cronos networks](https://docs.chainstack.com/operations/cronos/networks).\n",
            "enum": [
              "cronos-mainnet",
              "cronos-testnet"
            ]
          }
        }
      },
      "FantomNetworkConfiguration": {
        "type": "object",
        "description": "Fantom network configuration.",
        "properties": {
          "network": {
            "type": "string",
            "description": "Network to join.\n<br>See also [Fantom networks](https://docs.chainstack.com/operations/fantom/networks).\n",
            "enum": [
              "fantom-mainnet",
              "fantom-testnet"
            ]
          }
        }
      },
      "TezosNetworkConfiguration": {
        "type": "object",
        "description": "Tezos network configuration.",
        "properties": {
          "network": {
            "type": "string",
            "description": "Network to join.\n<br>See also [Tezos networks](https://docs.chainstack.com/operations/tezos/networks).\n",
            "enum": [
              "tezos-mainnet",
              "tezos-testnet"
            ]
          }
        }
      },
      "SolanaNetworkConfiguration": {
        "type": "object",
        "description": "Solana network configuration.",
        "properties": {
          "network": {
            "type": "string",
            "description": "Network to join.\n<br>See also [Solana networks](https://docs.chainstack.com/operations/solana/networks).\n",
            "enum": [
              "solana-mainnet",
              "solana-devnet"
            ]
          }
        }
      },
      "FuseNetworkConfiguration": {
        "type": "object",
        "description": "Fuse network configuration.",
        "properties": {
          "network": {
            "type": "string",
            "description": "Network to join.\n<br>See also [Fuse networks](https://docs.chainstack.com/operations/fuse/networks).\n",
            "enum": [
              "fuse-mainnet",
              "fuse-testnet"
            ]
          }
        }
      },
      "BitcoinNetworkConfiguration": {
        "type": "object",
        "description": "Bitcoin network configuration.",
        "properties": {
          "network": {
            "type": "string",
            "description": "Network to join.\n<br>See also [Bitcoin networks](https://docs.chainstack.com/operations/bitcoin/networks).\n",
            "enum": [
              "bitcoin-mainnet",
              "bitcoin-testnet"
            ]
          }
        }
      },
      "StarknetNetworkConfiguration": {
        "type": "object",
        "description": "StarkNet network configuration.",
        "properties": {
          "network": {
            "type": "string",
            "description": "Network to join.\n<br>See also [StarkNet networks](https://docs.chainstack.com/operations/starknet/networks).\n",
            "enum": [
              "starknet-mainnet"
            ]
          }
        }
      },
      "HarmonyNetworkConfiguration": {
        "type": "object",
        "description": "Harmony network configuration.",
        "properties": {
          "network": {
            "type": "string",
            "description": "Network to join.\n<br>See also [Harmony networks](https://docs.chainstack.com/operations/harmony/networks).\n",
            "enum": [
              "harmony-mainnet",
              "harmony-devnet"
            ]
          }
        }
      },
      "Configuration": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/EthereumNetworkConfiguration"
          },
          {
            "$ref": "#/components/schemas/PolygonPoSNetworkConfiguration"
          },
          {
            "$ref": "#/components/schemas/BinanceSmartChainNetworkConfiguration"
          },
          {
            "$ref": "#/components/schemas/AvalancheNetworkConfiguration"
          },
          {
            "$ref": "#/components/schemas/ArbitrumNetworkConfiguration"
          },
          {
            "$ref": "#/components/schemas/NearNetworkConfiguration"
          },
          {
            "$ref": "#/components/schemas/AuroraNetworkConfiguration"
          },
          {
            "$ref": "#/components/schemas/GnosisNetworkConfiguration"
          },
          {
            "$ref": "#/components/schemas/CronosNetworkConfiguration"
          },
          {
            "$ref": "#/components/schemas/FantomNetworkConfiguration"
          },
          {
            "$ref": "#/components/schemas/TezosNetworkConfiguration"
          },
          {
            "$ref": "#/components/schemas/SolanaNetworkConfiguration"
          },
          {
            "$ref": "#/components/schemas/FuseNetworkConfiguration"
          },
          {
            "$ref": "#/components/schemas/BitcoinNetworkConfiguration"
          },
          {
            "$ref": "#/components/schemas/StarknetNetworkConfiguration"
          },
          {
            "$ref": "#/components/schemas/HarmonyNetworkConfiguration"
          }
        ],
        "readOnly": true
      },
      "NodeTypeEnum": {
        "type": "string",
        "description": "Type of the node.\n<br>Available types:\n* `shared` — only for `ethereum`, `polygon-pos`, `bsc`, `avalanche`, `fantom`, `tezos`, `bitcoin`\n* `dedicated` — for all protocols\n",
        "enum": [
          "shared",
          "dedicated"
        ]
      },
      "Provider": {
        "type": "string",
        "enum": [
          "aws",
          "azure",
          "gcloud",
          "vzo"
        ],
        "description": "Cloud provider.\n<br>See also [Supported cloud providers](https://docs.chainstack.com/platform/supported-cloud-hosting-providers).\n"
      },
      "Region": {
        "type": "string",
        "enum": [
          "asia-southeast1",
          "ap-southeast-1",
          "us-west-2",
          "us-east-1",
          "uksouth",
          "eu3"
        ],
        "description": "Regions the nodes are deployed to.\n\nAvailable for `gcloud`:\n* `asia-southeast1`\n\nAvailable for `aws`:\n* `ap-southeast-1`\n* `us-west-2`\n* `us-east-1`\n\nAvailable for `azure`:\n* `uksouth`\n\nAvailable for `vzo`:\n* `eu3`\n"
      },
      "EthereumNodeDetails": {
        "type": "object",
        "description": "Ethereum node details.",
        "properties": {
          "mode": {
            "type": "string",
            "description": "See also [Ethereum node modes](https://docs.chainstack.com/operations/ethereum/modes)",
            "readOnly": true,
            "enum": [
              "full",
              "archive"
            ]
          },
          "version": {
            "type": "string",
            "readOnly": true
          },
          "api_namespaces": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string"
            }
          },
          "https_endpoint": {
            "type": "string",
            "readOnly": true,
            "description": "Only for the owner of the node."
          },
          "wss_endpoint": {
            "type": "string",
            "readOnly": true,
            "description": "Only for the owner of the node."
          },
          "beacon_endpoint": {
            "type": "string",
            "readOnly": true,
            "description": "Only for the owner of the node."
          },
          "graphql_endpoint": {
            "type": "string",
            "readOnly": true,
            "description": "Only for the owner of the node."
          },
          "auth_username": {
            "type": "string",
            "readOnly": true,
            "description": "Basic authentication username to access the node endpoints.\n<br>Only for the owner of the node.\n"
          },
          "auth_password": {
            "type": "string",
            "format": "password",
            "readOnly": true,
            "description": "Basic authentication password to access the node endpoints.\n<br>Only for the owner of the node.\n"
          },
          "auth_key": {
            "type": "string",
            "format": "password",
            "readOnly": true,
            "description": "Authentication key to access the node endpoints.\n<br>Only for the owner of the node.\n"
          }
        }
      },
      "BinanceSmartChainNodeDetails": {
        "type": "object",
        "description": "Binance Smart Chain node details.",
        "properties": {
          "mode": {
            "type": "string",
            "description": "See also [Binance Smart Chain node modes](https://docs.chainstack.com/operations/bsc/modes)",
            "readOnly": true,
            "enum": [
              "full",
              "archive"
            ]
          },
          "version": {
            "type": "string",
            "readOnly": true
          },
          "api_namespaces": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string"
            }
          },
          "https_endpoint": {
            "type": "string",
            "readOnly": true,
            "description": "Only for the owner of the node."
          },
          "wss_endpoint": {
            "type": "string",
            "readOnly": true,
            "description": "Only for the owner of the node."
          },
          "graphql_endpoint": {
            "type": "string",
            "readOnly": true,
            "description": "Only for the owner of the node."
          },
          "auth_username": {
            "type": "string",
            "readOnly": true,
            "description": "Basic authentication username to access the node endpoints.\n<br>Only for the owner of the node.\n"
          },
          "auth_password": {
            "type": "string",
            "format": "password",
            "readOnly": true,
            "description": "Basic authentication password to access the node endpoints.\n<br>Only for the owner of the node.\n"
          },
          "auth_key": {
            "type": "string",
            "format": "password",
            "readOnly": true,
            "description": "Authentication key to access the node endpoints.\n<br>Only for the owner of the node.\n"
          }
        }
      },
      "AvalancheNodeDetails": {
        "type": "object",
        "description": "Avalanche node details.",
        "properties": {
          "version": {
            "type": "string",
            "readOnly": true
          },
          "api_namespaces": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string"
            }
          },
          "https_endpoint": {
            "type": "string",
            "readOnly": true,
            "description": "Only for the owner of the node."
          },
          "wss_endpoint": {
            "type": "string",
            "readOnly": true,
            "description": "Only for the owner of the node."
          },
          "auth_username": {
            "type": "string",
            "readOnly": true,
            "description": "Basic authentication username to access the node endpoints.\n<br>Only for the owner of the node.\n"
          },
          "auth_password": {
            "type": "string",
            "format": "password",
            "readOnly": true,
            "description": "Basic authentication password to access the node endpoints.\n<br>Only for the owner of the node.\n"
          },
          "auth_key": {
            "type": "string",
            "format": "password",
            "readOnly": true,
            "description": "Authentication key to access the node endpoints.\n<br>Only for the owner of the node.\n"
          }
        }
      },
      "FantomNodeDetails": {
        "type": "object",
        "description": "Fantom node details.",
        "properties": {
          "version": {
            "type": "string",
            "readOnly": true
          },
          "api_namespaces": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string"
            }
          },
          "https_endpoint": {
            "type": "string",
            "readOnly": true,
            "description": "Only for the owner of the node."
          },
          "wss_endpoint": {
            "type": "string",
            "readOnly": true,
            "description": "Only for the owner of the node."
          },
          "graphql_endpoint": {
            "type": "string",
            "readOnly": true,
            "description": "Only for the owner of the node."
          },
          "auth_username": {
            "type": "string",
            "readOnly": true,
            "description": "Basic authentication username to access the node endpoints.\n<br>Only for the owner of the node.\n"
          },
          "auth_password": {
            "type": "string",
            "format": "password",
            "readOnly": true,
            "description": "Basic authentication password to access the node endpoints.\n<br>Only for the owner of the node.\n"
          },
          "auth_key": {
            "type": "string",
            "format": "password",
            "readOnly": true,
            "description": "Authentication key to access the node endpoints.\n<br>Only for the owner of the node.\n"
          }
        }
      },
      "TezosNodeDetails": {
        "type": "object",
        "description": "Tezos node details.",
        "properties": {
          "version": {
            "type": "string",
            "readOnly": true
          },
          "https_endpoint": {
            "type": "string",
            "readOnly": true,
            "description": "Only for the owner of the node."
          },
          "auth_username": {
            "type": "string",
            "readOnly": true,
            "description": "Basic authentication username to access the node endpoints.\n<br>Only for the owner of the node.\n"
          },
          "auth_password": {
            "type": "string",
            "format": "password",
            "readOnly": true,
            "description": "Basic authentication password to access the node endpoints.\n<br>Only for the owner of the node.\n"
          },
          "auth_key": {
            "type": "string",
            "format": "password",
            "readOnly": true,
            "description": "Authentication key to access the node endpoints.\n<br>Only for the owner of the node.\n"
          }
        }
      },
      "SolanaNodeDetails": {
        "type": "object",
        "description": "Solana node details.",
        "properties": {
          "version": {
            "type": "string",
            "readOnly": true
          },
          "https_endpoint": {
            "type": "string",
            "readOnly": true,
            "description": "Only for the owner of the node."
          },
          "wss_endpoint": {
            "type": "string",
            "readOnly": true,
            "description": "Only for the owner of the node."
          },
          "auth_username": {
            "type": "string",
            "readOnly": true,
            "description": "Basic authentication username to access the node endpoints.\n<br>Only for the owner of the node.\n"
          },
          "auth_password": {
            "type": "string",
            "format": "password",
            "readOnly": true,
            "description": "Basic authentication password to access the node endpoints.\n<br>Only for the owner of the node.\n"
          },
          "auth_key": {
            "type": "string",
            "format": "password",
            "readOnly": true,
            "description": "Authentication key to access the node endpoints.\n<br>Only for the owner of the node.\n"
          }
        }
      },
      "StarknetNodeDetails": {
        "type": "object",
        "description": "StarkNet node details.",
        "properties": {
          "version": {
            "type": "string",
            "readOnly": true
          },
          "https_endpoint": {
            "type": "string",
            "readOnly": true,
            "description": "Only for the owner of the node."
          },
          "auth_username": {
            "type": "string",
            "readOnly": true,
            "description": "Basic authentication username to access the node endpoints.\n<br>Only for the owner of the node.\n"
          },
          "auth_password": {
            "type": "string",
            "format": "password",
            "readOnly": true,
            "description": "Basic authentication password to access the node endpoints.\n<br>Only for the owner of the node.\n"
          },
          "auth_key": {
            "type": "string",
            "format": "password",
            "readOnly": true,
            "description": "Authentication key to access the node endpoints.\n<br>Only for the owner of the node.\n"
          }
        }
      },
      "BitcoinNodeDetails": {
        "type": "object",
        "description": "Bitcoin node details.",
        "properties": {
          "version": {
            "type": "string",
            "readOnly": true
          },
          "https_endpoint": {
            "type": "string",
            "readOnly": true,
            "description": "Only for the owner of the node."
          },
          "auth_username": {
            "type": "string",
            "readOnly": true,
            "description": "Basic authentication username to access the node endpoint.\n<br>Only for the owner of the node.\n"
          },
          "auth_password": {
            "type": "string",
            "format": "password",
            "readOnly": true,
            "description": "Basic authentication password to access the node endpoint.\n<br>Only for the owner of the node.\n"
          },
          "auth_key": {
            "type": "string",
            "format": "password",
            "readOnly": true,
            "description": "Authentication key to access the node endpoint.\n<br>Only for the owner of the node.\n"
          }
        }
      },
      "HarmonyNodeDetails": {
        "type": "object",
        "description": "Harmony node details.",
        "properties": {
          "version": {
            "type": "string",
            "readOnly": true
          },
          "api_namespaces": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string"
            }
          },
          "https_endpoint": {
            "type": "string",
            "readOnly": true,
            "description": "Only for the owner of the node."
          },
          "wss_endpoint": {
            "type": "string",
            "readOnly": true,
            "description": "Only for the owner of the node."
          },
          "auth_username": {
            "type": "string",
            "readOnly": true,
            "description": "Basic authentication username to access the node endpoints.\n<br>Only for the owner of the node.\n"
          },
          "auth_password": {
            "type": "string",
            "format": "password",
            "readOnly": true,
            "description": "Basic authentication password to access the node endpoints.\n<br>Only for the owner of the node.\n"
          },
          "auth_key": {
            "type": "string",
            "format": "password",
            "readOnly": true,
            "description": "Authentication key to access the node endpoints.\n<br>Only for the owner of the node.\n"
          }
        }
      },
      "NodeDetails": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/EthereumNodeDetails"
          },
          {
            "$ref": "#/components/schemas/BinanceSmartChainNodeDetails"
          },
          {
            "$ref": "#/components/schemas/AvalancheNodeDetails"
          },
          {
            "$ref": "#/components/schemas/FantomNodeDetails"
          },
          {
            "$ref": "#/components/schemas/TezosNodeDetails"
          },
          {
            "$ref": "#/components/schemas/SolanaNodeDetails"
          },
          {
            "$ref": "#/components/schemas/StarknetNodeDetails"
          },
          {
            "$ref": "#/components/schemas/BitcoinNodeDetails"
          },
          {
            "$ref": "#/components/schemas/HarmonyNodeDetails"
          }
        ],
        "readOnly": true
      },
      "NodeStatusEnum": {
        "type": "string",
        "description": "See more about [statuses](https://docs.chainstack.com/platform/view-node-and-network-status).\n",
        "readOnly": true,
        "enum": [
          "pending",
          "running",
          "maintenance",
          "failed",
          "error",
          "stopping",
          "stopped",
          "starting"
        ]
      },
      "BaseNode": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Name of the node."
          },
          "network": {
            "type": "string",
            "description": "ID of the network."
          },
          "organization": {
            "type": "string",
            "readOnly": true,
            "description": "ID of the organization that owns this node."
          },
          "type": {
            "$ref": "#/components/schemas/NodeTypeEnum"
          },
          "provider": {
            "$ref": "#/components/schemas/Provider"
          },
          "region": {
            "$ref": "#/components/schemas/Region"
          },
          "details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NodeDetails"
              }
            ],
            "description": "Protocol-specific attributes."
          },
          "status": {
            "$ref": "#/components/schemas/NodeStatusEnum"
          },
          "creator": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Creator"
              }
            ],
            "description": "Creator of the network."
          },
          "created_at": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreatedAt"
              }
            ],
            "description": "When the node was created."
          }
        }
      },
      "NodeRoleEnum": {
        "type": "string",
        "description": "Role of the node.\n<br>Available roles:\n* `peer` — peer node\n",
        "enum": [
          "peer"
        ]
      },
      "EthereumNodeConfiguration": {
        "type": "object",
        "description": "Ethereum node configuration.",
        "properties": {
          "archive": {
            "type": "boolean",
            "description": "Pass `true` if you want to access full blockchain data and an archive of historical states.\n<br>See more about [archive nodes](https://docs.chainstack.com/operations/ethereum/modes).\n"
          }
        }
      },
      "PolygonPoSNodeConfiguration": {
        "type": "object",
        "description": "Polygon PoS node configuration.",
        "properties": {
          "archive": {
            "type": "boolean",
            "description": "Pass `true` if you want to access full blockchain data and an archive of historical states.\n<br>See more about [archive nodes](https://docs.chainstack.com/operations/polygon/modes).\n"
          }
        }
      },
      "BinanceSmartChainNodeConfiguration": {
        "type": "object",
        "description": "Binance Smart Chain node configuration.",
        "properties": {
          "archive": {
            "type": "boolean",
            "description": "Pass `true` if you want to access full blockchain data and an archive of historical states.\n<br>See more about [archive nodes](https://docs.chainstack.com/operations/bsc/modes).\n"
          }
        }
      },
      "AvalancheNodeConfiguration": {
        "type": "object",
        "description": "Avalanche node configuration.",
        "properties": {
          "archive": {
            "type": "boolean",
            "description": "Pass `true` if you want to access full blockchain data and an archive of historical states.\n<br>See more about [archive nodes](https://docs.chainstack.com/operations/avalanche/modes).\n"
          }
        }
      },
      "FantomNodeConfiguration": {
        "type": "object",
        "description": "Fantom node configuration.",
        "properties": {
          "archive": {
            "type": "boolean",
            "description": "Pass `true` if you want to access full blockchain data and an archive of historical states.\n<br>See more about [archive nodes](https://docs.chainstack.com/operations/fantom/modes).\n"
          }
        }
      },
      "TezosNodeConfiguration": {
        "type": "object",
        "description": "Tezos node configuration.",
        "properties": {
          "archive": {
            "type": "boolean",
            "description": "Pass `true` if you want to access full blockchain data and an archive of historical states.\n<br>See more about [archive nodes](https://docs.chainstack.com/operations/tezos/modes).\n"
          },
          "tezos_node_type": {
            "type": "string",
            "description": "Currently 'regular' is the only supported type.\n"
          }
        }
      },
      "SolanaNodeConfiguration": {
        "type": "object",
        "description": "Solana node configuration."
      },
      "StarknetNodeConfiguration": {
        "type": "object",
        "description": "StarkNet node configuration."
      },
      "HarmonyNodeConfiguration": {
        "type": "object",
        "description": "Harmony node configuration.",
        "properties": {
          "archive": {
            "type": "boolean",
            "description": "Only `false` (full mode) is currently supported.\n"
          },
          "shard": {
            "type": "integer",
            "minimum": 0,
            "maximum": 0,
            "description": "Only Shard 0 is currently supported.\n"
          }
        }
      },
      "NodeConfiguration": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/EthereumNodeConfiguration"
          },
          {
            "$ref": "#/components/schemas/PolygonPoSNodeConfiguration"
          },
          {
            "$ref": "#/components/schemas/BinanceSmartChainNodeConfiguration"
          },
          {
            "$ref": "#/components/schemas/AvalancheNodeConfiguration"
          },
          {
            "$ref": "#/components/schemas/FantomNodeConfiguration"
          },
          {
            "$ref": "#/components/schemas/TezosNodeConfiguration"
          },
          {
            "$ref": "#/components/schemas/SolanaNodeConfiguration"
          },
          {
            "$ref": "#/components/schemas/StarknetNodeConfiguration"
          },
          {
            "$ref": "#/components/schemas/HarmonyNodeConfiguration"
          }
        ],
        "readOnly": true
      },
      "Node": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseNode"
          },
          {
            "type": "object",
            "properties": {
              "role": {
                "$ref": "#/components/schemas/NodeRoleEnum"
              },
              "configuration": {
                "$ref": "#/components/schemas/NodeConfiguration"
              }
            }
          }
        ]
      },
      "Network": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseNetwork"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the network."
              },
              "configuration": {
                "$ref": "#/components/schemas/Configuration"
              },
              "nodes": {
                "items": {
                  "$ref": "#/components/schemas/Node"
                }
              }
            }
          }
        ]
      },
      "EthereumNetworkCreateConfiguration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EthereumNetworkConfiguration"
          },
          {
            "type": "object",
            "required": [
              "network"
            ]
          }
        ]
      },
      "PolygonPoSNetworkCreateConfiguration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolygonPoSNetworkConfiguration"
          },
          {
            "type": "object",
            "required": [
              "network"
            ]
          }
        ]
      },
      "BinanceSmartChainNetworkCreateConfiguration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BinanceSmartChainNetworkConfiguration"
          },
          {
            "type": "object",
            "required": [
              "network"
            ]
          }
        ]
      },
      "AvalancheNetworkCreateConfiguration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AvalancheNetworkConfiguration"
          },
          {
            "type": "object",
            "required": [
              "network"
            ]
          }
        ]
      },
      "ArbitrumNetworkCreateConfiguration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ArbitrumNetworkConfiguration"
          },
          {
            "type": "object",
            "required": [
              "network"
            ]
          }
        ]
      },
      "NearNetworkCreateConfiguration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NearNetworkConfiguration"
          },
          {
            "type": "object",
            "required": [
              "network"
            ]
          }
        ]
      },
      "AuroraNetworkCreateConfiguration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AuroraNetworkConfiguration"
          },
          {
            "type": "object",
            "required": [
              "network"
            ]
          }
        ]
      },
      "GnosisNetworkCreateConfiguration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GnosisNetworkConfiguration"
          },
          {
            "type": "object",
            "required": [
              "network"
            ]
          }
        ]
      },
      "CronosNetworkCreateConfiguration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CronosNetworkConfiguration"
          },
          {
            "type": "object",
            "required": [
              "network"
            ]
          }
        ]
      },
      "FantomNetworkCreateConfiguration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FantomNetworkConfiguration"
          },
          {
            "type": "object",
            "required": [
              "network"
            ]
          }
        ]
      },
      "TezosNetworkCreateConfiguration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TezosNetworkConfiguration"
          },
          {
            "type": "object",
            "required": [
              "network"
            ]
          }
        ]
      },
      "SolanaNetworkCreateConfiguration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SolanaNetworkConfiguration"
          },
          {
            "type": "object",
            "required": [
              "network"
            ]
          }
        ]
      },
      "FuseNetworkCreateConfiguration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FuseNetworkConfiguration"
          },
          {
            "type": "object",
            "required": [
              "network"
            ]
          }
        ]
      },
      "BitcoinNetworkCreateConfiguration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BitcoinNetworkConfiguration"
          },
          {
            "type": "object",
            "required": [
              "network"
            ]
          }
        ]
      },
      "StarknetNetworkCreateConfiguration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StarknetNetworkConfiguration"
          },
          {
            "type": "object",
            "required": [
              "network"
            ]
          }
        ]
      },
      "HarmonyNetworkCreateConfiguration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/HarmonyNetworkConfiguration"
          },
          {
            "type": "object",
            "required": [
              "network"
            ]
          }
        ]
      },
      "CreateConfiguration": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/EthereumNetworkCreateConfiguration"
          },
          {
            "$ref": "#/components/schemas/PolygonPoSNetworkCreateConfiguration"
          },
          {
            "$ref": "#/components/schemas/BinanceSmartChainNetworkCreateConfiguration"
          },
          {
            "$ref": "#/components/schemas/AvalancheNetworkCreateConfiguration"
          },
          {
            "$ref": "#/components/schemas/ArbitrumNetworkCreateConfiguration"
          },
          {
            "$ref": "#/components/schemas/NearNetworkCreateConfiguration"
          },
          {
            "$ref": "#/components/schemas/AuroraNetworkCreateConfiguration"
          },
          {
            "$ref": "#/components/schemas/GnosisNetworkCreateConfiguration"
          },
          {
            "$ref": "#/components/schemas/CronosNetworkCreateConfiguration"
          },
          {
            "$ref": "#/components/schemas/FantomNetworkCreateConfiguration"
          },
          {
            "$ref": "#/components/schemas/TezosNetworkCreateConfiguration"
          },
          {
            "$ref": "#/components/schemas/SolanaNetworkCreateConfiguration"
          },
          {
            "$ref": "#/components/schemas/FuseNetworkCreateConfiguration"
          },
          {
            "$ref": "#/components/schemas/BitcoinNetworkCreateConfiguration"
          },
          {
            "$ref": "#/components/schemas/StarknetNetworkCreateConfiguration"
          },
          {
            "$ref": "#/components/schemas/HarmonyNetworkCreateConfiguration"
          }
        ]
      },
      "NodeRoleCreateEnum": {
        "type": "string",
        "description": "Role of the node.",
        "enum": [
          "peer"
        ]
      },
      "EthereumNodeCreateConfiguration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EthereumNodeConfiguration"
          },
          {
            "type": "object",
            "required": [
              "archive"
            ]
          }
        ]
      },
      "PolygonPoSNodeCreateConfiguration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolygonPoSNodeConfiguration"
          },
          {
            "type": "object",
            "required": [
              "archive"
            ]
          }
        ]
      },
      "BinanceSmartChainNodeCreateConfiguration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BinanceSmartChainNodeConfiguration"
          },
          {
            "type": "object",
            "required": [
              "archive"
            ]
          }
        ]
      },
      "AvalancheNodeCreateConfiguration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AvalancheNodeConfiguration"
          },
          {
            "type": "object",
            "required": [
              "archive"
            ]
          }
        ]
      },
      "FantomNodeCreateConfiguration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FantomNodeConfiguration"
          },
          {
            "type": "object",
            "required": [
              "archive"
            ]
          }
        ]
      },
      "TezosNodeCreateConfiguration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TezosNodeConfiguration"
          },
          {
            "type": "object",
            "required": [
              "archive",
              "tezos_node_type"
            ]
          }
        ]
      },
      "SolanaNodeCreateConfiguration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SolanaNodeConfiguration"
          },
          {
            "type": "object"
          }
        ]
      },
      "StarknetNodeCreateConfiguration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StarknetNodeConfiguration"
          },
          {
            "type": "object"
          }
        ]
      },
      "HarmonyNodeCreateConfiguration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/HarmonyNodeConfiguration"
          },
          {
            "type": "object",
            "required": [
              "archive"
            ]
          }
        ]
      },
      "NodeCreateConfiguration": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/EthereumNodeCreateConfiguration"
          },
          {
            "$ref": "#/components/schemas/PolygonPoSNodeCreateConfiguration"
          },
          {
            "$ref": "#/components/schemas/BinanceSmartChainNodeCreateConfiguration"
          },
          {
            "$ref": "#/components/schemas/AvalancheNodeCreateConfiguration"
          },
          {
            "$ref": "#/components/schemas/FantomNodeCreateConfiguration"
          },
          {
            "$ref": "#/components/schemas/TezosNodeCreateConfiguration"
          },
          {
            "$ref": "#/components/schemas/SolanaNodeCreateConfiguration"
          },
          {
            "$ref": "#/components/schemas/StarknetNodeCreateConfiguration"
          },
          {
            "$ref": "#/components/schemas/HarmonyNodeCreateConfiguration"
          }
        ]
      },
      "NodeInitialCreate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseNode"
          },
          {
            "type": "object",
            "properties": {
              "role": {
                "$ref": "#/components/schemas/NodeRoleCreateEnum"
              },
              "configuration": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NodeCreateConfiguration"
                  }
                ],
                "description": "Protocol specific parameters.\n<br>Pass `{}` if there are no specific parameters for the selected protocol.\n"
              },
              "network": {
                "readOnly": true
              }
            },
            "required": [
              "name",
              "region",
              "provider",
              "role",
              "type",
              "configuration"
            ]
          }
        ]
      },
      "NetworkCreate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseNetwork"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the network.\n* Required for `consortium` networks.\n* Autogenerated for `public chain` networks.\n"
              },
              "configuration": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateConfiguration"
                  }
                ],
                "description": "Protocol-specific parameters.\n<br>Pass `{}` if there are no specific parameters for the chosen protocol.\n"
              },
              "nodes": {
                "items": {
                  "$ref": "#/components/schemas/NodeInitialCreate"
                },
                "description": "List of nodes that will be initially created."
              }
            },
            "required": [
              "project",
              "protocol",
              "configuration",
              "nodes",
              "name"
            ]
          }
        ]
      },
      "NetworkUpdate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseNetwork"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "New name of the network."
              },
              "configuration": {
                "$ref": "#/components/schemas/Configuration"
              },
              "nodes": {
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/Node"
                }
              },
              "project": {
                "readOnly": true
              },
              "protocol": {
                "readOnly": true
              }
            }
          }
        ]
      },
      "NodeCreate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseNode"
          },
          {
            "type": "object",
            "properties": {
              "role": {
                "$ref": "#/components/schemas/NodeRoleCreateEnum"
              },
              "configuration": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NodeCreateConfiguration"
                  }
                ],
                "description": "Protocol-specific parameters.\n<br>Pass `{}` if there are no specific parameters for the selected protocol.\n"
              }
            },
            "required": [
              "name",
              "network",
              "region",
              "provider",
              "role",
              "type",
              "configuration"
            ]
          }
        ]
      },
      "NodeUpdate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseNode"
          },
          {
            "type": "object",
            "properties": {
              "configuration": {
                "$ref": "#/components/schemas/NodeConfiguration"
              },
              "type": {
                "readOnly": true
              },
              "role": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NodeRoleEnum"
                  }
                ],
                "readOnly": true
              },
              "provider": {
                "readOnly": true
              },
              "region": {
                "readOnly": true
              },
              "network": {
                "readOnly": true
              }
            }
          }
        ]
      },
      "AccessToken": {
        "type": "object",
        "description": "Token required to access an application from Chainstack Marketplace.",
        "readOnly": true,
        "properties": {
          "access_token": {
            "type": "string",
            "readOnly": true,
            "description": "Token required to access an application from Chainstack Marketplace."
          }
        }
      },
      "OwnerIPFS": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "CreatorIPFS": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Pin": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "title": {
            "type": "string",
            "maximum": 255
          },
          "status": {
            "type": "string"
          },
          "size": {
            "type": "integer"
          },
          "item_count": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "bucket_id": {
            "type": "string"
          },
          "folder_id": {
            "type": "string"
          },
          "public_link": {
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/OwnerIPFS"
          },
          "creator": {
            "$ref": "#/components/schemas/CreatorIPFS"
          }
        }
      },
      "PinList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer"
          },
          "file_count": {
            "type": "integer"
          },
          "folder_count": {
            "type": "integer"
          },
          "folderTitle": {
            "type": "string"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Pin"
            }
          }
        }
      },
      "PinFile": {
        "type": "object",
        "properties": {
          "bucket_id": {
            "type": "string"
          },
          "folder_id": {
            "type": "string",
            "description": "optional, if not set, files uploaded to root of bucket"
          },
          "file": {
            "type": "string",
            "format": "binary"
          }
        },
        "required": [
          "bucket_id",
          "file"
        ]
      },
      "Folder": {
        "type": "object",
        "properties": {
          "bucket_id": {
            "type": "string"
          },
          "folder_id": {
            "type": "string"
          }
        }
      },
      "PinByCid": {
        "type": "object",
        "properties": {
          "bucket_id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "folder_id": {
            "type": "string"
          }
        },
        "required": [
          "bucket_id",
          "cid"
        ]
      },
      "FaucetGoerliRequest": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "Address to send tokens to."
          }
        }
      },
      "FaucetGoerliResponse": {
        "type": "object",
        "properties": {
          "amountSent": {
            "type": "number",
            "description": "Amount sent."
          },
          "transaction": {
            "type": "string",
            "description": "Transaction details URL."
          }
        }
      },
      "FaucetSepoliaRequest": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "Address to send tokens to."
          }
        }
      },
      "FaucetSepoliaResponse": {
        "type": "object",
        "properties": {
          "amountSent": {
            "type": "number",
            "description": "Amount of tokens sent."
          },
          "transaction": {
            "type": "string",
            "description": "Transaction details URL."
          }
        }
      }
    },
    "responses": {
      "ValidationError": {
        "description": "Validation error.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "A string indicating the kind of error."
                    },
                    "message": {
                      "type": "string",
                      "description": "A human-readable description of the error."
                    },
                    "fields": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "description": "Optional. Field-level validation errors."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "NotFoundError": {
        "description": "Object does not exist or caller has insufficient permissions to access it.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "A string indicating the kind of error."
                    },
                    "message": {
                      "type": "string",
                      "description": "A human-readable description of the error."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "IpfsError": {
        "description": "any errors",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "errors": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string"
                      },
                      "message": {
                        "type": "string"
                      },
                      "field": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "TooManyRequestsError": {
        "description": "Validation error.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "A string indicating the kind of error."
                    },
                    "message": {
                      "type": "string",
                      "description": "A human-readable description of the error."
                    }
                  }
                },
                "nextFaucetAvailable": {
                  "type": "string",
                  "description": "The date when tokens can be requested next time."
                }
              }
            }
          }
        }
      }
    },
    "parameters": {
      "ProjectOrdering": {
        "name": "order_by",
        "required": false,
        "in": "query",
        "description": "Which field to use when ordering the results.\n<br> Use the `-` prefix to perform descending ordering (`-name`).\n",
        "schema": {
          "type": "string",
          "enum": [
            "name",
            "created_at"
          ]
        }
      },
      "Pagination": {
        "name": "page",
        "required": false,
        "in": "query",
        "description": "A page number within the paginated result set.",
        "schema": {
          "type": "integer"
        }
      },
      "OrganizationIdFilter": {
        "name": "organization",
        "required": false,
        "in": "query",
        "description": "Filter by organization ID.",
        "schema": {
          "type": "string"
        }
      },
      "NameFilter": {
        "name": "name",
        "required": false,
        "in": "query",
        "description": "Filter by name.",
        "schema": {
          "type": "string"
        }
      },
      "ProjectTypeFilter": {
        "name": "type",
        "required": false,
        "in": "query",
        "description": "Filter by project type.",
        "schema": {
          "$ref": "#/components/schemas/ProjectTypeEnum"
        }
      },
      "Id": {
        "name": "id",
        "in": "path",
        "required": true,
        "description": "A unique value identifying the Object.",
        "schema": {
          "type": "string"
        }
      },
      "NetworkOrdering": {
        "name": "order_by",
        "required": false,
        "in": "query",
        "description": "Which field to use when ordering the results.\n<br> Use the `-` prefix to perform descending ordering (`-name`).\n",
        "schema": {
          "type": "string",
          "enum": [
            "name",
            "created_at"
          ]
        }
      },
      "ProjectIdFilter": {
        "name": "project",
        "required": false,
        "in": "query",
        "description": "Filter by project ID.",
        "schema": {
          "type": "string"
        }
      },
      "PublicNetworkNameFilter": {
        "name": "public_network",
        "required": false,
        "in": "query",
        "description": "Filter by public network.",
        "schema": {
          "type": "string",
          "example": "corda-network-uat",
          "enum": [
            "ethereum-mainnet",
            "ethereum-ropsten-testnet",
            "ethereum-rinkeby-testnet",
            "polygon-pos-mainnet",
            "polygon-pos-testnet",
            "bsc-mainnet",
            "bsc-testnet",
            "avalanche-mainnet",
            "avalanche-testnet",
            "arbitrum-mainnet",
            "arbitrum-goerli",
            "near-mainnet",
            "near-testnet",
            "aurora-mainnet",
            "aurora-testnet",
            "gnosis-mainnet",
            "gnosis-testnet",
            "cronos-mainnet",
            "cronos-testnet",
            "fantom-mainnet",
            "fantom-testnet",
            "starknet-mainnet",
            "starknet-testnet",
            "harmony-mainnet",
            "harmony-devnet",
            "tezos-mainnet",
            "tezos-testnet",
            "fuse-mainnet",
            "fuse-testnet",
            "bitcoin-mainnet",
            "bitcoin-testnet"
          ]
        }
      },
      "NetworkStatusFilter": {
        "name": "status",
        "required": false,
        "in": "query",
        "description": "Filter by network status.",
        "schema": {
          "$ref": "#/components/schemas/NetworkStatusEnum"
        }
      },
      "ProtocolFilter": {
        "name": "protocol",
        "required": false,
        "in": "query",
        "description": "Filter by protocol.",
        "schema": {
          "$ref": "#/components/schemas/Protocol"
        }
      },
      "NetworkProjectTypeFilter": {
        "name": "project_type",
        "required": false,
        "in": "query",
        "description": "Filter by project type.",
        "schema": {
          "$ref": "#/components/schemas/ProjectTypeEnum"
        }
      },
      "NodeOrdering": {
        "name": "order_by",
        "required": false,
        "in": "query",
        "description": "Which field to use when ordering the results.\n<br> Use the `-` prefix to perform descending ordering (`-name`).\n",
        "schema": {
          "type": "string",
          "enum": [
            "name",
            "created_at"
          ]
        }
      },
      "NetworkIdFilter": {
        "name": "network",
        "required": false,
        "in": "query",
        "description": "Filter by network ID.",
        "schema": {
          "type": "string"
        }
      },
      "RegionFilter": {
        "name": "region",
        "required": false,
        "in": "query",
        "description": "Filter by the region the node is deployed to.",
        "schema": {
          "$ref": "#/components/schemas/Region"
        }
      },
      "ProviderFilter": {
        "name": "provider",
        "required": false,
        "in": "query",
        "description": "Filter by the cloud provider of the node.",
        "schema": {
          "$ref": "#/components/schemas/Provider"
        }
      },
      "NodeStatusFilter": {
        "name": "status",
        "required": false,
        "in": "query",
        "description": "Filter by node status.",
        "schema": {
          "$ref": "#/components/schemas/NodeStatusEnum"
        }
      },
      "NodeRoleFilter": {
        "name": "role",
        "required": false,
        "in": "query",
        "description": "Filter by node role.",
        "schema": {
          "$ref": "#/components/schemas/NodeRoleEnum"
        }
      },
      "NodeTypeFilter": {
        "name": "type",
        "required": false,
        "in": "query",
        "description": "Filter by node type.",
        "schema": {
          "$ref": "#/components/schemas/NodeTypeEnum"
        }
      },
      "ArchiveFilter": {
        "name": "archive",
        "required": false,
        "in": "query",
        "description": "Filter Ethereum, Polygon PoS, Binance Smart Chain, Avalanche, Fantom, and Tezos nodes by the archive mode flag.",
        "schema": {
          "type": "boolean"
        }
      },
      "Slug": {
        "name": "slug",
        "in": "path",
        "required": true,
        "description": "A unique value identifying the marketplace application.",
        "schema": {
          "type": "string"
        }
      },
      "IpfsApiPinsParams": {
        "name": "params",
        "in": "query",
        "description": "Filter params",
        "schema": {
          "type": "object",
          "properties": {
            "bucket_id": {
              "type": "string",
              "description": "ID of the bucket"
            },
            "folder_id": {
              "type": "string",
              "description": "ID of the folder. If no ID - search by root folder"
            },
            "q": {
              "type": "string",
              "description": "filter by internal ID / CID / title",
              "example": "q=testfile, q=QmUkdju, q=FILE_"
            },
            "sort": {
              "type": "string",
              "description": " valid JSON object with two fields: `field` and `order`\n- \\<field\\> can be: `ID`, `CID`, `type`, `title`, `status`, `size`, `created_at`, `updated_at`, `bucket_id`, `folder_id`, `public_link`, `owner`, `creator`\n- \\<order\\> can be: `ASC`, `DESC` (can be in lowercase), or empty (asc by default)",
              "example": "sort={”field”:<fieldname>, “order”:<order>}"
            },
            "offset": {
              "type": "integer"
            },
            "limit": {
              "type": "integer"
            }
          }
        }
      },
      "IpfsApiId": {
        "name": "id",
        "in": "path",
        "description": "A unique value identifying the Object.",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "examples": {
      "PublicProjectCreate": {
        "value": {
          "name": "My public chain project",
          "description": "My public chain project description",
          "type": "public"
        }
      },
      "PublicProject": {
        "value": {
          "id": "PR-123-456",
          "name": "My public chain project",
          "type": "public",
          "networks": 0,
          "created_at": "2020-06-15T07:38:00.747Z",
          "creator": {
            "id": "UR-111-111-111",
            "email": "john.smith@example.com",
            "first_name": "John",
            "last_name": "Smith",
            "organization": {
              "id": "RG-123-456",
              "name": "My organization"
            }
          }
        }
      },
      "EthereumNetworkCreate": {
        "value": {
          "project": "PR-123-456",
          "protocol": "ethereum",
          "configuration": {
            "network": "ethereum-mainnet"
          },
          "nodes": [
            {
              "name": "My Ethereum node",
              "type": "dedicated",
              "role": "peer",
              "provider": "gcloud",
              "region": "asia-southeast1",
              "configuration": {
                "archive": true
              }
            }
          ]
        }
      },
      "PolygonPoSNetworkCreate": {
        "value": {
          "project": "PR-123-456",
          "protocol": "polygon-pos",
          "configuration": {
            "network": "polygon-pos-mainnet"
          },
          "nodes": [
            {
              "name": "My Polygon PoS node",
              "type": "dedicated",
              "role": "peer",
              "provider": "gcloud",
              "region": "asia-southeast1",
              "configuration": {
                "archive": true
              }
            }
          ]
        }
      },
      "BinanceSmartChainNetworkCreate": {
        "value": {
          "project": "PR-123-456",
          "protocol": "bsc",
          "configuration": {
            "network": "bsc-mainnet"
          },
          "nodes": [
            {
              "name": "My Binance Smart Chain node",
              "type": "dedicated",
              "role": "peer",
              "provider": "gcloud",
              "region": "asia-southeast1",
              "configuration": {
                "archive": true
              }
            }
          ]
        }
      },
      "AvalancheNetworkCreate": {
        "value": {
          "project": "PR-123-456",
          "protocol": "avalanche",
          "configuration": {
            "network": "avalanche-mainnet"
          },
          "nodes": [
            {
              "name": "My Avalanche node",
              "type": "dedicated",
              "role": "peer",
              "provider": "vzo",
              "region": "eu1",
              "configuration": {
                "archive": true
              }
            }
          ]
        }
      },
      "ArbitrumNetworkCreate": {
        "value": {
          "project": "PR-123-456",
          "protocol": "arbitrum",
          "configuration": {
            "network": "arbitrum-mainnet"
          },
          "nodes": [
            {
              "name": "My Arbitrum node",
              "type": "shared",
              "role": "peer",
              "provider": "vzo",
              "region": "eu3",
              "configuration": {
                "archive": false,
                "client": "nitro"
              }
            }
          ]
        }
      },
      "NearNetworkCreate": {
        "value": {
          "project": "PR-123-456",
          "protocol": "near",
          "configuration": {
            "network": "near-mainnet"
          },
          "nodes": [
            {
              "name": "My Near node",
              "type": "shared",
              "role": "peer",
              "provider": "vzo",
              "region": "eu3",
              "configuration": {
                "archive": false
              }
            }
          ]
        }
      },
      "AuroraNetworkCreate": {
        "value": {
          "project": "PR-123-456",
          "protocol": "aurora",
          "configuration": {
            "network": "aurora-mainnet"
          },
          "nodes": [
            {
              "name": "My Aurora node",
              "type": "shared",
              "role": "peer",
              "provider": "vzo",
              "region": "eu3",
              "configuration": {
                "archive": false
              }
            }
          ]
        }
      },
      "GnosisNetworkCreate": {
        "value": {
          "project": "PR-123-456",
          "protocol": "gnosis",
          "configuration": {
            "network": "gnosis-mainnet"
          },
          "nodes": [
            {
              "name": "My Gnosis node",
              "type": "shared",
              "role": "peer",
              "provider": "vzo",
              "region": "eu3",
              "configuration": {
                "archive": false
              }
            }
          ]
        }
      },
      "CronosNetworkCreate": {
        "value": {
          "project": "PR-123-456",
          "protocol": "cronos",
          "configuration": {
            "network": "cronos-mainnet"
          },
          "nodes": [
            {
              "name": "My Cronos node",
              "type": "shared",
              "role": "peer",
              "provider": "vzo",
              "region": "eu3",
              "configuration": {
                "archive": false
              }
            }
          ]
        }
      },
      "FantomNetworkCreate": {
        "value": {
          "project": "PR-123-456",
          "protocol": "fantom",
          "configuration": {
            "network": "fantom-mainnet"
          },
          "nodes": [
            {
              "name": "My Fantom node",
              "type": "dedicated",
              "role": "peer",
              "provider": "vzo",
              "region": "eu1",
              "configuration": {
                "archive": true
              }
            }
          ]
        }
      },
      "TezosNetworkCreate": {
        "value": {
          "project": "PR-123-456",
          "protocol": "tezos",
          "configuration": {
            "network": "tezos-mainnet"
          },
          "nodes": [
            {
              "name": "My Tezos node",
              "type": "dedicated",
              "role": "peer",
              "provider": "vzo",
              "region": "eu1",
              "configuration": {
                "archive": true,
                "tezos_node_type": "regular"
              }
            }
          ]
        }
      },
      "SolanaNetworkCreate": {
        "value": {
          "project": "PR-123-456",
          "protocol": "solana",
          "configuration": {
            "network": "solana-mainnet"
          },
          "nodes": [
            {
              "name": "My Solana node",
              "type": "shared",
              "role": "peer",
              "provider": "aws",
              "region": "us-east-1",
              "configuration": {}
            }
          ]
        }
      },
      "StarknetNetworkCreate": {
        "value": {
          "project": "PR-123-456",
          "protocol": "starknet",
          "configuration": {
            "network": "starknet-mainnet"
          },
          "nodes": [
            {
              "name": "My StarkNet node",
              "type": "shared",
              "role": "peer",
              "provider": "aws",
              "region": "us-east-1",
              "configuration": {}
            }
          ]
        }
      },
      "FuseNetworkCreate": {
        "value": {
          "project": "PR-123-456",
          "protocol": "fuse",
          "configuration": {
            "network": "fuse-mainnet"
          },
          "nodes": [
            {
              "name": "My Fuse node",
              "type": "shared",
              "role": "peer",
              "provider": "vzo",
              "region": "eu3",
              "configuration": {
                "archive": false
              }
            }
          ]
        }
      },
      "BitcoinNetworkCreate": {
        "value": {
          "project": "PR-123-456",
          "protocol": "bitcoin",
          "configuration": {
            "network": "bitcoin-mainnet"
          },
          "nodes": [
            {
              "name": "My Bitcoin node",
              "type": "shared",
              "role": "peer",
              "provider": "gcloud",
              "region": "asia-southeast1",
              "configuration": {}
            }
          ]
        }
      },
      "HarmonyNetworkCreate": {
        "value": {
          "project": "PR-123-456",
          "protocol": "harmony",
          "configuration": {
            "network": "harmony-mainnet"
          },
          "nodes": [
            {
              "name": "My Harmony node",
              "type": "dedicated",
              "role": "peer",
              "provider": "vzo",
              "region": "eu1",
              "configuration": {
                "archive": false
              }
            }
          ]
        }
      },
      "EthereumNetwork": {
        "value": {
          "id": "NW-123-456-7",
          "name": "Mainnet",
          "project": "PR-123-456",
          "protocol": "ethereum",
          "configuration": {
            "network": "ethereum-mainnet"
          },
          "details": {},
          "status": "ok",
          "nodes": [
            {
              "id": "ND-123-456-789",
              "name": "My Ethereum node",
              "network": "NW-123-456-7",
              "organization": "RG-123-456",
              "type": "dedicated",
              "role": "peer",
              "provider": "gcloud",
              "region": "asia-southeast1",
              "status": "running",
              "configuration": {
                "archive": true
              },
              "details": {
                "mode": "archive",
                "version": "1.9.9",
                "api_namespaces": [
                  "net",
                  "eth",
                  "web3",
                  "txpool",
                  "debug"
                ],
                "graphql_endpoint": "https://nd-123-456-789.p2pify.com/graphql",
                "https_endpoint": "https://nd-123-456-789.p2pify.com",
                "wss_endpoint": "wss://ws-nd-123-456-789.p2pify.com",
                "beacon_endpoint": "https://beacon-nd-123-456-789.p2pify.com",
                "auth_username": "user-name",
                "auth_password": "pass-word-pass-word-pass-word",
                "auth_key": "3c6e0b8a9c15224a8228b9a98ca1531d"
              },
              "created_at": "2020-06-15T07:38:00.747Z",
              "creator": {
                "id": "UR-111-111-111",
                "email": "john.smith@example.com",
                "first_name": "John",
                "last_name": "Smith",
                "organization": {
                  "id": "RG-123-456",
                  "name": "My organization"
                }
              }
            }
          ],
          "created_at": "2020-06-15T07:38:00.747Z",
          "creator": {
            "id": "UR-111-111-111",
            "email": "john.smith@example.com",
            "first_name": "John",
            "last_name": "Smith",
            "organization": {
              "id": "RG-123-456",
              "name": "My organization"
            }
          }
        }
      },
      "PolygonPoSNetwork": {
        "value": {
          "id": "NW-123-456-7",
          "name": "Mainnet",
          "project": "PR-123-456",
          "protocol": "polygon-pos",
          "configuration": {
            "network": "polygon-pos-mainnet"
          },
          "details": {},
          "status": "ok",
          "nodes": [
            {
              "id": "ND-123-456-789",
              "name": "My Polygon PoS node",
              "network": "NW-123-456-7",
              "organization": "RG-123-456",
              "type": "dedicated",
              "role": "peer",
              "provider": "gcloud",
              "region": "asia-southeast1",
              "status": "running",
              "configuration": {
                "archive": true
              },
              "details": {
                "mode": "archive",
                "version": "1.0.6",
                "api_namespaces": [
                  "net",
                  "eth",
                  "web3",
                  "txpool",
                  "debug",
                  "parlia"
                ],
                "graphql_endpoint": "https://nd-123-456-789.p2pify.com/graphql",
                "https_endpoint": "https://nd-123-456-789.p2pify.com",
                "wss_endpoint": "wss://ws-nd-123-456-789.p2pify.com",
                "auth_username": "user-name",
                "auth_password": "pass-word-pass-word-pass-word",
                "auth_key": "3c6e0b8a9c15224a8228b9a98ca1531d"
              },
              "created_at": "2020-06-15T07:38:00.747Z",
              "creator": {
                "id": "UR-111-111-111",
                "email": "john.smith@example.com",
                "first_name": "John",
                "last_name": "Smith",
                "organization": {
                  "id": "RG-123-456",
                  "name": "My organization"
                }
              }
            }
          ],
          "created_at": "2020-06-15T07:38:00.747Z",
          "creator": {
            "id": "UR-111-111-111",
            "email": "john.smith@example.com",
            "first_name": "John",
            "last_name": "Smith",
            "organization": {
              "id": "RG-123-456",
              "name": "My organization"
            }
          }
        }
      },
      "BinanceSmartChainNetwork": {
        "value": {
          "id": "NW-123-456-7",
          "name": "Mainnet",
          "project": "PR-123-456",
          "protocol": "bsc",
          "configuration": {
            "network": "bsc-mainnet"
          },
          "details": {},
          "status": "ok",
          "nodes": [
            {
              "id": "ND-123-456-789",
              "name": "My Binance Smart Chain node",
              "network": "NW-123-456-7",
              "organization": "RG-123-456",
              "type": "dedicated",
              "role": "peer",
              "provider": "gcloud",
              "region": "asia-southeast1",
              "status": "running",
              "configuration": {
                "archive": true
              },
              "details": {
                "mode": "archive",
                "version": "1.0.6",
                "api_namespaces": [
                  "net",
                  "eth",
                  "web3",
                  "txpool",
                  "debug",
                  "parlia"
                ],
                "graphql_endpoint": "https://nd-123-456-789.p2pify.com/graphql",
                "https_endpoint": "https://nd-123-456-789.p2pify.com",
                "wss_endpoint": "wss://ws-nd-123-456-789.p2pify.com",
                "auth_username": "user-name",
                "auth_password": "pass-word-pass-word-pass-word",
                "auth_key": "3c6e0b8a9c15224a8228b9a98ca1531d"
              },
              "created_at": "2020-06-15T07:38:00.747Z",
              "creator": {
                "id": "UR-111-111-111",
                "email": "john.smith@example.com",
                "first_name": "John",
                "last_name": "Smith",
                "organization": {
                  "id": "RG-123-456",
                  "name": "My organization"
                }
              }
            }
          ],
          "created_at": "2020-06-15T07:38:00.747Z",
          "creator": {
            "id": "UR-111-111-111",
            "email": "john.smith@example.com",
            "first_name": "John",
            "last_name": "Smith",
            "organization": {
              "id": "RG-123-456",
              "name": "My organization"
            }
          }
        }
      },
      "AvalancheNetwork": {
        "value": {
          "id": "NW-123-456-7",
          "name": "Mainnet",
          "project": "PR-123-456",
          "protocol": "avalanche",
          "configuration": {
            "network": "avalanche-mainnet"
          },
          "details": {},
          "status": "ok",
          "nodes": [
            {
              "id": "ND-123-456-789",
              "name": "My Avalanche node",
              "network": "NW-123-456-7",
              "organization": "RG-123-456",
              "type": "dedicated",
              "role": "peer",
              "provider": "vzo",
              "region": "eu1",
              "status": "running",
              "configuration": {
                "archive": true
              },
              "details": {
                "version": "1.7.2",
                "api_namespaces": [
                  "net",
                  "eth",
                  "web3"
                ],
                "https_endpoint": "https://nd-123-456-789.p2pify.com",
                "wss_endpoint": "wss://ws-nd-123-456-789.p2pify.com",
                "auth_username": "user-name",
                "auth_password": "pass-word-pass-word-pass-word",
                "auth_key": "3c6e0b8a9c15224a8228b9a98ca1531d"
              },
              "created_at": "2020-06-15T07:38:00.747Z",
              "creator": {
                "id": "UR-111-111-111",
                "email": "john.smith@example.com",
                "first_name": "John",
                "last_name": "Smith",
                "organization": {
                  "id": "RG-123-456",
                  "name": "My organization"
                }
              }
            }
          ],
          "created_at": "2020-06-15T07:38:00.747Z",
          "creator": {
            "id": "UR-111-111-111",
            "email": "john.smith@example.com",
            "first_name": "John",
            "last_name": "Smith",
            "organization": {
              "id": "RG-123-456",
              "name": "My organization"
            }
          }
        }
      },
      "ArbitrumNetwork": {
        "value": {
          "id": "NW-123-456-7",
          "name": "Mainnet",
          "project": "PR-123-456",
          "protocol": "arbitrum",
          "configuration": {
            "network": "arbitrum-mainnet"
          },
          "details": {},
          "status": "ok",
          "nodes": [
            {
              "id": "ND-123-456-789",
              "name": "My Arbitrum node",
              "network": "NW-123-456-7",
              "organization": "RG-123-456",
              "type": "dedicated",
              "role": "peer",
              "provider": "vzo",
              "region": "eu3",
              "status": "running",
              "configuration": {
                "archive": false,
                "client": "nitro"
              },
              "details": {
                "mode": "full",
                "version": "2.0.7",
                "api_namespaces": [
                  "net",
                  "eth",
                  "web3",
                  "txpool",
                  "debug"
                ],
                "https_endpoint": "https://nd-123-456-789.p2pify.com",
                "wss_endpoint": "wss://ws-nd-123-456-789.p2pify.com",
                "auth_username": "user-name",
                "auth_password": "pass-word-pass-word-pass-word",
                "auth_key": "3c6e0b8a9c15224a8228b9a98ca1531d"
              },
              "created_at": "2020-06-15T07:38:00.747Z",
              "creator": {
                "id": "UR-111-111-111",
                "email": "john.smith@example.com",
                "first_name": "John",
                "last_name": "Smith",
                "organization": {
                  "id": "RG-123-456",
                  "name": "My organization"
                }
              }
            }
          ],
          "created_at": "2020-06-15T07:38:00.747Z",
          "creator": {
            "id": "UR-111-111-111",
            "email": "john.smith@example.com",
            "first_name": "John",
            "last_name": "Smith",
            "organization": {
              "id": "RG-123-456",
              "name": "My organization"
            }
          }
        }
      },
      "NearNetwork": {
        "value": {
          "id": "NW-123-456-7",
          "name": "Mainnet",
          "project": "PR-123-456",
          "protocol": "near",
          "configuration": {
            "network": "near-mainnet"
          },
          "details": {},
          "status": "ok",
          "nodes": [
            {
              "id": "ND-123-456-789",
              "name": "My Near node",
              "network": "NW-123-456-7",
              "organization": "RG-123-456",
              "type": "dedicated",
              "role": "peer",
              "provider": "vzo",
              "region": "eu3",
              "status": "running",
              "configuration": {
                "archive": false
              },
              "details": {
                "mode": "full",
                "version": "1.29.0",
                "https_endpoint": "https://nd-123-456-789.p2pify.com",
                "wss_endpoint": "wss://ws-nd-123-456-789.p2pify.com",
                "auth_username": "user-name",
                "auth_password": "pass-word-pass-word-pass-word",
                "auth_key": "3c6e0b8a9c15224a8228b9a98ca1531d"
              },
              "created_at": "2020-06-15T07:38:00.747Z",
              "creator": {
                "id": "UR-111-111-111",
                "email": "john.smith@example.com",
                "first_name": "John",
                "last_name": "Smith",
                "organization": {
                  "id": "RG-123-456",
                  "name": "My organization"
                }
              }
            }
          ],
          "created_at": "2020-06-15T07:38:00.747Z",
          "creator": {
            "id": "UR-111-111-111",
            "email": "john.smith@example.com",
            "first_name": "John",
            "last_name": "Smith",
            "organization": {
              "id": "RG-123-456",
              "name": "My organization"
            }
          }
        }
      },
      "AuroraNetwork": {
        "value": {
          "id": "NW-123-456-7",
          "name": "Mainnet",
          "project": "PR-123-456",
          "protocol": "aurora",
          "configuration": {
            "network": "aurora-mainnet"
          },
          "details": {},
          "status": "ok",
          "nodes": [
            {
              "id": "ND-123-456-789",
              "name": "My Aurora node",
              "network": "NW-123-456-7",
              "organization": "RG-123-456",
              "type": "dedicated",
              "role": "peer",
              "provider": "vzo",
              "region": "eu3",
              "status": "running",
              "configuration": {
                "archive": false
              },
              "details": {
                "mode": "full",
                "version": 20220801,
                "api_namespaces": [
                  "net",
                  "eth",
                  "web3",
                  "txpool",
                  "debug"
                ],
                "https_endpoint": "https://nd-123-456-789.p2pify.com",
                "wss_endpoint": "wss://ws-nd-123-456-789.p2pify.com",
                "auth_username": "user-name",
                "auth_password": "pass-word-pass-word-pass-word",
                "auth_key": "3c6e0b8a9c15224a8228b9a98ca1531d"
              },
              "created_at": "2020-06-15T07:38:00.747Z",
              "creator": {
                "id": "UR-111-111-111",
                "email": "john.smith@example.com",
                "first_name": "John",
                "last_name": "Smith",
                "organization": {
                  "id": "RG-123-456",
                  "name": "My organization"
                }
              }
            }
          ],
          "created_at": "2020-06-15T07:38:00.747Z",
          "creator": {
            "id": "UR-111-111-111",
            "email": "john.smith@example.com",
            "first_name": "John",
            "last_name": "Smith",
            "organization": {
              "id": "RG-123-456",
              "name": "My organization"
            }
          }
        }
      },
      "GnosisNetwork": {
        "value": {
          "id": "NW-123-456-7",
          "name": "Mainnet",
          "project": "PR-123-456",
          "protocol": "gnosis",
          "configuration": {
            "network": "gnosis-mainnet"
          },
          "details": {},
          "status": "ok",
          "nodes": [
            {
              "id": "ND-123-456-789",
              "name": "My Gnosis node",
              "network": "NW-123-456-7",
              "organization": "RG-123-456",
              "type": "dedicated",
              "role": "peer",
              "provider": "vzo",
              "region": "eu3",
              "status": "running",
              "configuration": {
                "archive": false
              },
              "details": {
                "mode": "full",
                "version": "1.13.3",
                "api_namespaces": [
                  "net",
                  "eth",
                  "web3",
                  "txpool",
                  "debug",
                  "subscribe",
                  "parity"
                ],
                "https_endpoint": "https://nd-123-456-789.p2pify.com",
                "wss_endpoint": "wss://ws-nd-123-456-789.p2pify.com",
                "auth_username": "user-name",
                "auth_password": "pass-word-pass-word-pass-word",
                "auth_key": "3c6e0b8a9c15224a8228b9a98ca1531d"
              },
              "created_at": "2020-06-15T07:38:00.747Z",
              "creator": {
                "id": "UR-111-111-111",
                "email": "john.smith@example.com",
                "first_name": "John",
                "last_name": "Smith",
                "organization": {
                  "id": "RG-123-456",
                  "name": "My organization"
                }
              }
            }
          ],
          "created_at": "2020-06-15T07:38:00.747Z",
          "creator": {
            "id": "UR-111-111-111",
            "email": "john.smith@example.com",
            "first_name": "John",
            "last_name": "Smith",
            "organization": {
              "id": "RG-123-456",
              "name": "My organization"
            }
          }
        }
      },
      "CronosNetwork": {
        "value": {
          "id": "NW-123-456-7",
          "name": "Mainnet",
          "project": "PR-123-456",
          "protocol": "cronos",
          "configuration": {
            "network": "cronos-mainnet"
          },
          "details": {},
          "status": "ok",
          "nodes": [
            {
              "id": "ND-123-456-789",
              "name": "My Cronos node",
              "network": "NW-123-456-7",
              "organization": "RG-123-456",
              "type": "dedicated",
              "role": "peer",
              "provider": "vzo",
              "region": "eu3",
              "status": "running",
              "configuration": {
                "archive": false
              },
              "details": {
                "mode": "full",
                "version": "v0.8.1",
                "api_namespaces": [
                  "net",
                  "eth",
                  "web3",
                  "txpool",
                  "debug"
                ],
                "https_endpoint": "https://nd-123-456-789.p2pify.com",
                "wss_endpoint": "wss://ws-nd-123-456-789.p2pify.com",
                "auth_username": "user-name",
                "auth_password": "pass-word-pass-word-pass-word",
                "auth_key": "3c6e0b8a9c15224a8228b9a98ca1531d"
              },
              "created_at": "2020-06-15T07:38:00.747Z",
              "creator": {
                "id": "UR-111-111-111",
                "email": "john.smith@example.com",
                "first_name": "John",
                "last_name": "Smith",
                "organization": {
                  "id": "RG-123-456",
                  "name": "My organization"
                }
              }
            }
          ],
          "created_at": "2020-06-15T07:38:00.747Z",
          "creator": {
            "id": "UR-111-111-111",
            "email": "john.smith@example.com",
            "first_name": "John",
            "last_name": "Smith",
            "organization": {
              "id": "RG-123-456",
              "name": "My organization"
            }
          }
        }
      },
      "FantomNetwork": {
        "value": {
          "id": "NW-123-456-7",
          "name": "Mainnet",
          "project": "PR-123-456",
          "protocol": "fantom",
          "configuration": {
            "network": "fantom-mainnet"
          },
          "details": {},
          "status": "ok",
          "nodes": [
            {
              "id": "ND-123-456-789",
              "name": "My Fantom node",
              "network": "NW-123-456-7",
              "organization": "RG-123-456",
              "type": "dedicated",
              "role": "peer",
              "provider": "vzo",
              "region": "eu1",
              "status": "running",
              "configuration": {
                "archive": true
              },
              "details": {
                "version": "1.0.2",
                "api_namespaces": [
                  "net",
                  "eth",
                  "web3"
                ],
                "graphql_endpoint": "https://nd-123-456-789.p2pify.com/graphql",
                "https_endpoint": "https://nd-123-456-789.p2pify.com",
                "wss_endpoint": "wss://ws-nd-123-456-789.p2pify.com",
                "auth_username": "user-name",
                "auth_password": "pass-word-pass-word-pass-word",
                "auth_key": "3c6e0b8a9c15224a8228b9a98ca1531d"
              },
              "created_at": "2020-06-15T07:38:00.747Z",
              "creator": {
                "id": "UR-111-111-111",
                "email": "john.smith@example.com",
                "first_name": "John",
                "last_name": "Smith",
                "organization": {
                  "id": "RG-123-456",
                  "name": "My organization"
                }
              }
            }
          ],
          "created_at": "2020-06-15T07:38:00.747Z",
          "creator": {
            "id": "UR-111-111-111",
            "email": "john.smith@example.com",
            "first_name": "John",
            "last_name": "Smith",
            "organization": {
              "id": "RG-123-456",
              "name": "My organization"
            }
          }
        }
      },
      "TezosNetwork": {
        "value": {
          "id": "NW-123-456-7",
          "name": "Mainnet",
          "project": "PR-123-456",
          "protocol": "tezos",
          "configuration": {
            "network": "tezos-mainnet"
          },
          "details": {},
          "status": "ok",
          "nodes": [
            {
              "id": "ND-123-456-789",
              "name": "My Tezos node",
              "network": "NW-123-456-7",
              "organization": "RG-123-456",
              "type": "dedicated",
              "role": "peer",
              "provider": "gcloud",
              "region": "asia-southeast1",
              "status": "running",
              "configuration": {
                "archive": true,
                "tezos_node_type": "regular"
              },
              "details": {
                "version": "9.2.0",
                "https_endpoint": "https://nd-123-456-789.p2pify.com",
                "auth_username": "user-name",
                "auth_password": "pass-word-pass-word-pass-word",
                "auth_key": "3c6e0b8a9c15224a8228b9a98ca1531d"
              },
              "created_at": "2020-06-15T07:38:00.747Z",
              "creator": {
                "id": "UR-111-111-111",
                "email": "john.smith@example.com",
                "first_name": "John",
                "last_name": "Smith",
                "organization": {
                  "id": "RG-123-456",
                  "name": "My organization"
                }
              }
            }
          ],
          "created_at": "2020-06-15T07:38:00.747Z",
          "creator": {
            "id": "UR-111-111-111",
            "email": "john.smith@example.com",
            "first_name": "John",
            "last_name": "Smith",
            "organization": {
              "id": "RG-123-456",
              "name": "My organization"
            }
          }
        }
      },
      "SolanaNetwork": {
        "value": {
          "id": "NW-123-456-7",
          "name": "Mainnet",
          "project": "PR-123-456",
          "protocol": "solana",
          "configuration": {
            "network": "solana-mainnet"
          },
          "details": {},
          "status": "ok",
          "nodes": [
            {
              "id": "ND-123-456-789",
              "name": "My Solana node",
              "network": "NW-123-456-7",
              "organization": "RG-123-456",
              "type": "shared",
              "role": "peer",
              "provider": "aws",
              "region": "us-east-1",
              "status": "running",
              "configuration": {},
              "details": {
                "version": "1.8.8",
                "https_endpoint": "https://nd-123-456-789.p2pify.com",
                "wss_endpoint": "wss://ws-nd-123-456-789.p2pify.com",
                "auth_username": "user-name",
                "auth_password": "pass-word-pass-word-pass-word",
                "auth_key": "3c6e0b8a9c15224a8228b9a98ca1531d"
              },
              "created_at": "2020-06-15T07:38:00.747Z",
              "creator": {
                "id": "UR-111-111-111",
                "email": "john.smith@example.com",
                "first_name": "John",
                "last_name": "Smith",
                "organization": {
                  "id": "RG-123-456",
                  "name": "My organization"
                }
              }
            }
          ],
          "created_at": "2020-06-15T07:38:00.747Z",
          "creator": {
            "id": "UR-111-111-111",
            "email": "john.smith@example.com",
            "first_name": "John",
            "last_name": "Smith",
            "organization": {
              "id": "RG-123-456",
              "name": "My organization"
            }
          }
        }
      },
      "StarknetNetwork": {
        "value": {
          "id": "NW-123-456-7",
          "name": "Mainnet",
          "project": "PR-123-456",
          "protocol": "starknet",
          "configuration": {
            "network": "starknet-mainnet"
          },
          "details": {},
          "status": "ok",
          "nodes": [
            {
              "id": "ND-123-456-789",
              "name": "My StarkNet node",
              "network": "NW-123-456-7",
              "organization": "RG-123-456",
              "type": "shared",
              "role": "peer",
              "provider": "aws",
              "region": "us-east-1",
              "status": "running",
              "configuration": {},
              "details": {
                "version": "1.8.8",
                "https_endpoint": "https://nd-123-456-789.p2pify.com",
                "auth_username": "user-name",
                "auth_password": "pass-word-pass-word-pass-word",
                "auth_key": "3c6e0b8a9c15224a8228b9a98ca1531d"
              },
              "created_at": "2020-06-15T07:38:00.747Z",
              "creator": {
                "id": "UR-111-111-111",
                "email": "john.smith@example.com",
                "first_name": "John",
                "last_name": "Smith",
                "organization": {
                  "id": "RG-123-456",
                  "name": "My organization"
                }
              }
            }
          ],
          "created_at": "2020-06-15T07:38:00.747Z",
          "creator": {
            "id": "UR-111-111-111",
            "email": "john.smith@example.com",
            "first_name": "John",
            "last_name": "Smith",
            "organization": {
              "id": "RG-123-456",
              "name": "My organization"
            }
          }
        }
      },
      "FuseNetwork": {
        "value": {
          "id": "NW-123-456-7",
          "name": "Mainnet",
          "project": "PR-123-456",
          "protocol": "fuse",
          "configuration": {
            "network": "fuse-mainnet"
          },
          "details": {},
          "status": "ok",
          "nodes": [
            {
              "id": "ND-123-456-789",
              "name": "My Fuse node",
              "network": "NW-123-456-7",
              "organization": "RG-123-456",
              "type": "dedicated",
              "role": "peer",
              "provider": "vzo",
              "region": "eu3",
              "status": "running",
              "configuration": {
                "archive": false
              },
              "details": {
                "mode": "full",
                "version": "1.13.3",
                "api_namespaces": [
                  "net",
                  "eth",
                  "web3",
                  "txpool",
                  "debug"
                ],
                "https_endpoint": "https://nd-123-456-789.p2pify.com",
                "wss_endpoint": "wss://ws-nd-123-456-789.p2pify.com",
                "auth_username": "user-name",
                "auth_password": "pass-word-pass-word-pass-word",
                "auth_key": "3c6e0b8a9c15224a8228b9a98ca1531d"
              },
              "created_at": "2020-06-15T07:38:00.747Z",
              "creator": {
                "id": "UR-111-111-111",
                "email": "john.smith@example.com",
                "first_name": "John",
                "last_name": "Smith",
                "organization": {
                  "id": "RG-123-456",
                  "name": "My organization"
                }
              }
            }
          ],
          "created_at": "2020-06-15T07:38:00.747Z",
          "creator": {
            "id": "UR-111-111-111",
            "email": "john.smith@example.com",
            "first_name": "John",
            "last_name": "Smith",
            "organization": {
              "id": "RG-123-456",
              "name": "My organization"
            }
          }
        }
      },
      "BitcoinNetwork": {
        "value": {
          "id": "NW-123-456-7",
          "name": "Bitcoin mainnet",
          "project": "PR-123-456",
          "protocol": "bitcoin",
          "configuration": {
            "network": "bitcoin-mainnet"
          },
          "details": {},
          "status": "ok",
          "nodes": [
            {
              "id": "ND-123-456-789",
              "name": "My Bitcoin node",
              "network": "NW-123-456-7",
              "organization": "RG-123-456",
              "type": "shared",
              "role": "peer",
              "provider": "gcloud",
              "region": "asia-southeast1",
              "status": "running",
              "configuration": {},
              "details": {
                "version": "0.19.0.1",
                "https_endpoint": "https://nd-123-456-789.p2pify.com",
                "auth_username": "user-name",
                "auth_password": "pass-word-pass-word-pass-word",
                "auth_key": "3c6e0b8a9c15224a8228b9a98ca1531d"
              },
              "created_at": "2020-06-15T07:38:00.747Z",
              "creator": {
                "id": "UR-111-111-111",
                "email": "john.smith@example.com",
                "first_name": "John",
                "last_name": "Smith",
                "organization": {
                  "id": "RG-123-456",
                  "name": "My organization"
                }
              }
            }
          ],
          "created_at": "2020-06-15T07:38:00.747Z",
          "creator": {
            "id": "UR-111-111-111",
            "email": "john.smith@example.com",
            "first_name": "John",
            "last_name": "Smith",
            "organization": {
              "id": "RG-123-456",
              "name": "My organization"
            }
          }
        }
      },
      "HarmonyNetwork": {
        "value": {
          "id": "NW-123-456-7",
          "name": "Mainnet",
          "project": "PR-123-456",
          "protocol": "harmony",
          "configuration": {
            "network": "harmony-mainnet"
          },
          "details": {},
          "status": "ok",
          "nodes": [
            {
              "id": "ND-123-456-789",
              "name": "My Harmony node",
              "network": "NW-123-456-7",
              "organization": "RG-123-456",
              "type": "dedicated",
              "role": "peer",
              "provider": "vzo",
              "region": "eu1",
              "status": "running",
              "configuration": {
                "archive": false,
                "shard": 0
              },
              "details": {
                "version": "4.3.9",
                "api_namespaces": [
                  "hmy",
                  "hmyv2",
                  "net",
                  "eth",
                  "web3"
                ],
                "https_endpoint": "https://nd-123-456-789.p2pify.com",
                "wss_endpoint": "wss://ws-nd-123-456-789.p2pify.com",
                "auth_username": "user-name",
                "auth_password": "pass-word-pass-word-pass-word",
                "auth_key": "3c6e0b8a9c15224a8228b9a98ca1531d"
              },
              "created_at": "2020-06-15T07:38:00.747Z",
              "creator": {
                "id": "UR-111-111-111",
                "email": "john.smith@example.com",
                "first_name": "John",
                "last_name": "Smith",
                "organization": {
                  "id": "RG-123-456",
                  "name": "My organization"
                }
              }
            }
          ],
          "created_at": "2020-06-15T07:38:00.747Z",
          "creator": {
            "id": "UR-111-111-111",
            "email": "john.smith@example.com",
            "first_name": "John",
            "last_name": "Smith",
            "organization": {
              "id": "RG-123-456",
              "name": "My organization"
            }
          }
        }
      },
      "EthereumNodeCreate": {
        "value": {
          "name": "My Ethereum node",
          "network": "NW-123-456-7",
          "type": "dedicated",
          "role": "peer",
          "provider": "gcloud",
          "region": "asia-southeast1",
          "configuration": {
            "archive": true
          }
        }
      },
      "PolygonPoSNodeCreate": {
        "value": {
          "name": "My Polygon PoS node",
          "network": "NW-123-456-7",
          "type": "dedicated",
          "role": "peer",
          "provider": "gcloud",
          "region": "asia-southeast1",
          "configuration": {
            "archive": true
          }
        }
      },
      "BinanceSmartChainNodeCreate": {
        "value": {
          "name": "My Binance Smart Chain node",
          "network": "NW-123-456-7",
          "type": "dedicated",
          "role": "peer",
          "provider": "gcloud",
          "region": "asia-southeast1",
          "configuration": {
            "archive": true
          }
        }
      },
      "AvalancheNodeCreate": {
        "value": {
          "name": "My Avalanche node",
          "network": "NW-123-456-7",
          "type": "dedicated",
          "role": "peer",
          "provider": "vzo",
          "region": "eu1",
          "configuration": {
            "archive": true
          }
        }
      },
      "FantomNodeCreate": {
        "value": {
          "name": "My Fantom node",
          "network": "NW-123-456-7",
          "type": "dedicated",
          "role": "peer",
          "provider": "vzo",
          "region": "eu1",
          "configuration": {
            "archive": true
          }
        }
      },
      "TezosNodeCreate": {
        "value": {
          "name": "My Tezos node",
          "network": "NW-123-456-7",
          "type": "dedicated",
          "role": "peer",
          "provider": "gcloud",
          "region": "asia-southeast1",
          "configuration": {
            "archive": true,
            "tezos_node_type": "regular"
          }
        }
      },
      "SolanaNodeCreate": {
        "value": {
          "name": "My Solana node",
          "network": "NW-123-456-7",
          "type": "shared",
          "role": "peer",
          "provider": "aws",
          "region": "us-east-1",
          "configuration": {}
        }
      },
      "StarknetNodeCreate": {
        "value": {
          "name": "My StarkNet node",
          "network": "NW-123-456-7",
          "type": "shared",
          "role": "peer",
          "provider": "aws",
          "region": "us-east-1",
          "configuration": {}
        }
      },
      "BitcoinNodeCreate": {
        "value": {
          "name": "My Bitcoin node",
          "network": "NW-123-456-7",
          "type": "shared",
          "role": "peer",
          "provider": "gcloud",
          "region": "asia-southeast1",
          "configuration": {}
        }
      },
      "HarmonyNodeCreate": {
        "value": {
          "name": "My Harmony node",
          "network": "NW-123-456-7",
          "type": "dedicated",
          "role": "peer",
          "provider": "vzo",
          "region": "eu1",
          "configuration": {
            "archive": false
          }
        }
      },
      "EthereumNode": {
        "value": {
          "id": "ND-123-456-789",
          "name": "My Ethereum archive node",
          "network": "NW-123-456-7",
          "organization": "RG-123-456",
          "type": "dedicated",
          "role": "peer",
          "provider": "gcloud",
          "region": "asia-southeast1",
          "status": "running",
          "configuration": {
            "archive": true
          },
          "details": {
            "mode": "archive",
            "version": "1.9.9",
            "api_namespaces": [
              "net",
              "eth",
              "web3",
              "txpool",
              "debug"
            ],
            "graphql_endpoint": "https://nd-123-456-789.p2pify.com/graphql",
            "https_endpoint": "https://nd-123-456-789.p2pify.com",
            "wss_endpoint": "wss://ws-nd-123-456-789.p2pify.com",
            "beacon_endpoint": "https://beacon-nd-123-456-789.p2pify.com",
            "auth_username": "user-name",
            "auth_password": "pass-word-pass-word-pass-word",
            "auth_key": "3c6e0b8a9c15224a8228b9a98ca1531d"
          },
          "created_at": "2020-06-15T07:38:00.747Z",
          "creator": {
            "id": "UR-111-111-111",
            "email": "john.smith@example.com",
            "first_name": "John",
            "last_name": "Smith",
            "organization": {
              "id": "RG-123-456",
              "name": "My organization"
            }
          }
        }
      },
      "PolygonPoSNode": {
        "value": {
          "id": "ND-123-456-789",
          "name": "My Polygon PoS archive node",
          "network": "NW-123-456-7",
          "organization": "RG-123-456",
          "type": "dedicated",
          "role": "peer",
          "provider": "gcloud",
          "region": "asia-southeast1",
          "status": "running",
          "configuration": {
            "archive": true
          },
          "details": {
            "mode": "archive",
            "version": "1.0.6",
            "api_namespaces": [
              "net",
              "eth",
              "web3",
              "txpool",
              "debug",
              "parlia"
            ],
            "graphql_endpoint": "https://nd-123-456-789.p2pify.com/graphql",
            "https_endpoint": "https://nd-123-456-789.p2pify.com",
            "wss_endpoint": "wss://ws-nd-123-456-789.p2pify.com",
            "auth_username": "user-name",
            "auth_password": "pass-word-pass-word-pass-word",
            "auth_key": "3c6e0b8a9c15224a8228b9a98ca1531d"
          },
          "created_at": "2020-06-15T07:38:00.747Z",
          "creator": {
            "id": "UR-111-111-111",
            "email": "john.smith@example.com",
            "first_name": "John",
            "last_name": "Smith",
            "organization": {
              "id": "RG-123-456",
              "name": "My organization"
            }
          }
        }
      },
      "BinanceSmartChainNode": {
        "value": {
          "id": "ND-123-456-789",
          "name": "My Binance Smart Chain archive node",
          "network": "NW-123-456-7",
          "organization": "RG-123-456",
          "type": "dedicated",
          "role": "peer",
          "provider": "gcloud",
          "region": "asia-southeast1",
          "status": "running",
          "configuration": {
            "archive": true
          },
          "details": {
            "mode": "archive",
            "version": "1.0.6",
            "api_namespaces": [
              "net",
              "eth",
              "web3",
              "txpool",
              "debug",
              "parlia"
            ],
            "graphql_endpoint": "https://nd-123-456-789.p2pify.com/graphql",
            "https_endpoint": "https://nd-123-456-789.p2pify.com",
            "wss_endpoint": "wss://ws-nd-123-456-789.p2pify.com",
            "auth_username": "user-name",
            "auth_password": "pass-word-pass-word-pass-word",
            "auth_key": "3c6e0b8a9c15224a8228b9a98ca1531d"
          },
          "created_at": "2020-06-15T07:38:00.747Z",
          "creator": {
            "id": "UR-111-111-111",
            "email": "john.smith@example.com",
            "first_name": "John",
            "last_name": "Smith",
            "organization": {
              "id": "RG-123-456",
              "name": "My organization"
            }
          }
        }
      },
      "AvalancheNode": {
        "value": {
          "id": "ND-123-456-789",
          "name": "My Avalanche node",
          "network": "NW-123-456-7",
          "organization": "RG-123-456",
          "type": "dedicated",
          "role": "peer",
          "provider": "vzo",
          "region": "eu1",
          "status": "running",
          "configuration": {
            "archive": false
          },
          "details": {
            "version": "1.7.2",
            "api_namespaces": [
              "net",
              "eth",
              "web3"
            ],
            "https_endpoint": "https://nd-123-456-789.p2pify.com",
            "wss_endpoint": "wss://ws-nd-123-456-789.p2pify.com",
            "auth_username": "user-name",
            "auth_password": "pass-word-pass-word-pass-word",
            "auth_key": "3c6e0b8a9c15224a8228b9a98ca1531d"
          },
          "created_at": "2020-06-15T07:38:00.747Z",
          "creator": {
            "id": "UR-111-111-111",
            "email": "john.smith@example.com",
            "first_name": "John",
            "last_name": "Smith",
            "organization": {
              "id": "RG-123-456",
              "name": "My organization"
            }
          }
        }
      },
      "FantomNode": {
        "value": {
          "id": "ND-123-456-789",
          "name": "My Fantom node",
          "network": "NW-123-456-7",
          "organization": "RG-123-456",
          "type": "dedicated",
          "role": "peer",
          "provider": "vzo",
          "region": "eu1",
          "status": "running",
          "configuration": {
            "archive": false
          },
          "details": {
            "version": "1.0.2",
            "api_namespaces": [
              "net",
              "eth",
              "web3"
            ],
            "graphql_endpoint": "https://nd-123-456-789.p2pify.com/graphql",
            "https_endpoint": "https://nd-123-456-789.p2pify.com",
            "wss_endpoint": "wss://ws-nd-123-456-789.p2pify.com",
            "auth_username": "user-name",
            "auth_password": "pass-word-pass-word-pass-word",
            "auth_key": "3c6e0b8a9c15224a8228b9a98ca1531d"
          },
          "created_at": "2020-06-15T07:38:00.747Z",
          "creator": {
            "id": "UR-111-111-111",
            "email": "john.smith@example.com",
            "first_name": "John",
            "last_name": "Smith",
            "organization": {
              "id": "RG-123-456",
              "name": "My organization"
            }
          }
        }
      },
      "TezosNode": {
        "value": {
          "id": "ND-123-456-789",
          "name": "My Tezos node",
          "network": "NW-123-456-7",
          "organization": "RG-123-456",
          "type": "dedicated",
          "role": "peer",
          "provider": "gcloud",
          "region": "asia-southeast1",
          "status": "running",
          "configuration": {
            "archive": false,
            "tezos_node_type": "regular"
          },
          "details": {
            "version": "9.2.0",
            "https_endpoint": "https://nd-123-456-789.p2pify.com",
            "auth_username": "user-name",
            "auth_password": "pass-word-pass-word-pass-word",
            "auth_key": "3c6e0b8a9c15224a8228b9a98ca1531d"
          },
          "created_at": "2020-06-15T07:38:00.747Z",
          "creator": {
            "id": "UR-111-111-111",
            "email": "john.smith@example.com",
            "first_name": "John",
            "last_name": "Smith",
            "organization": {
              "id": "RG-123-456",
              "name": "My organization"
            }
          }
        }
      },
      "SolanaNode": {
        "value": {
          "id": "ND-123-456-789",
          "name": "My Solana node",
          "network": "NW-123-456-7",
          "organization": "RG-123-456",
          "type": "shared",
          "role": "peer",
          "provider": "aws",
          "region": "us-east-1",
          "status": "running",
          "configuration": {},
          "details": {
            "version": "1.8.8",
            "https_endpoint": "https://nd-123-456-789.p2pify.com",
            "wss_endpoint": "wss://ws-nd-123-456-789.p2pify.com",
            "auth_username": "user-name",
            "auth_password": "pass-word-pass-word-pass-word",
            "auth_key": "3c6e0b8a9c15224a8228b9a98ca1531d"
          },
          "created_at": "2020-06-15T07:38:00.747Z",
          "creator": {
            "id": "UR-111-111-111",
            "email": "john.smith@example.com",
            "first_name": "John",
            "last_name": "Smith",
            "organization": {
              "id": "RG-123-456",
              "name": "My organization"
            }
          }
        }
      },
      "StarknetNode": {
        "value": {
          "id": "ND-123-456-789",
          "name": "My StarkNet node",
          "network": "NW-123-456-7",
          "organization": "RG-123-456",
          "type": "shared",
          "role": "peer",
          "provider": "aws",
          "region": "us-east-1",
          "status": "running",
          "configuration": {},
          "details": {
            "version": "1.8.8",
            "https_endpoint": "https://nd-123-456-789.p2pify.com",
            "auth_username": "user-name",
            "auth_password": "pass-word-pass-word-pass-word",
            "auth_key": "3c6e0b8a9c15224a8228b9a98ca1531d"
          },
          "created_at": "2020-06-15T07:38:00.747Z",
          "creator": {
            "id": "UR-111-111-111",
            "email": "john.smith@example.com",
            "first_name": "John",
            "last_name": "Smith",
            "organization": {
              "id": "RG-123-456",
              "name": "My organization"
            }
          }
        }
      },
      "BitcoinNode": {
        "value": {
          "id": "ND-123-456-789",
          "name": "My Bitcoin node",
          "network": "NW-123-456-7",
          "organization": "RG-123-456",
          "type": "shared",
          "role": "peer",
          "provider": "gcloud",
          "region": "asia-southeast1",
          "status": "running",
          "configuration": {},
          "details": {
            "version": "0.19.0.1",
            "https_endpoint": "https://nd-123-456-789.p2pify.com",
            "auth_username": "user-name",
            "auth_password": "pass-word-pass-word-pass-word",
            "auth_key": "3c6e0b8a9c15224a8228b9a98ca1531d"
          },
          "created_at": "2020-06-15T07:38:00.747Z",
          "creator": {
            "id": "UR-111-111-111",
            "email": "john.smith@example.com",
            "first_name": "John",
            "last_name": "Smith",
            "organization": {
              "id": "RG-123-456",
              "name": "My organization"
            }
          }
        }
      },
      "HarmonyNode": {
        "value": {
          "id": "ND-123-456-789",
          "name": "My Harmony node",
          "network": "NW-123-456-7",
          "organization": "RG-123-456",
          "type": "dedicated",
          "role": "peer",
          "provider": "vzo",
          "region": "eu1",
          "status": "running",
          "configuration": {
            "archive": false,
            "shard": 0
          },
          "details": {
            "version": "4.3.9",
            "api_namespaces": [
              "hmy",
              "hmyv2",
              "net",
              "eth",
              "web3"
            ],
            "https_endpoint": "https://nd-123-456-789.p2pify.com",
            "wss_endpoint": "wss://ws-nd-123-456-789.p2pify.com",
            "auth_username": "user-name",
            "auth_password": "pass-word-pass-word-pass-word",
            "auth_key": "3c6e0b8a9c15224a8228b9a98ca1531d"
          },
          "created_at": "2020-06-15T07:38:00.747Z",
          "creator": {
            "id": "UR-111-111-111",
            "email": "john.smith@example.com",
            "first_name": "John",
            "last_name": "Smith",
            "organization": {
              "id": "RG-123-456",
              "name": "My organization"
            }
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://api.chainstack.com",
      "description": "API endpoint"
    }
  ]
}